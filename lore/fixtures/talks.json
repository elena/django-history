[
{
    "fields": {
        "colour": null,
        "name": "contrib.admindocs",
        "slug": "contribadmindocs"
    },
    "model": "lore.category",
    "pk": 1
},
{
    "fields": {
        "colour": null,
        "name": "contrib.auth",
        "slug": "contribauth"
    },
    "model": "lore.category",
    "pk": 2
},
{
    "fields": {
        "colour": null,
        "name": "contrib.contenttypes",
        "slug": "contribcontenttypes"
    },
    "model": "lore.category",
    "pk": 3
},
{
    "fields": {
        "colour": null,
        "name": "contrib.csrf",
        "slug": "contribcsrf"
    },
    "model": "lore.category",
    "pk": 4
},
{
    "fields": {
        "colour": null,
        "name": "contrib.flatpages",
        "slug": "contribflatpages"
    },
    "model": "lore.category",
    "pk": 5
},
{
    "fields": {
        "colour": null,
        "name": "contrib.formtools",
        "slug": "contribformtools"
    },
    "model": "lore.category",
    "pk": 6
},
{
    "fields": {
        "colour": null,
        "name": "contrib.messages",
        "slug": "contribmessages"
    },
    "model": "lore.category",
    "pk": 7
},
{
    "fields": {
        "colour": null,
        "name": "contrib.postgres",
        "slug": "contribpostgres"
    },
    "model": "lore.category",
    "pk": 8
},
{
    "fields": {
        "colour": null,
        "name": "contrib.redirects",
        "slug": "contribredirects"
    },
    "model": "lore.category",
    "pk": 9
},
{
    "fields": {
        "colour": null,
        "name": "contrib.sessions",
        "slug": "contribsessions"
    },
    "model": "lore.category",
    "pk": 10
},
{
    "fields": {
        "colour": null,
        "name": "contrib.sites",
        "slug": "contribsites"
    },
    "model": "lore.category",
    "pk": 11
},
{
    "fields": {
        "colour": null,
        "name": "contrib.staticfiles",
        "slug": "contribstaticfiles"
    },
    "model": "lore.category",
    "pk": 12
},
{
    "fields": {
        "colour": null,
        "name": "contrib.syndication",
        "slug": "contribsyndication"
    },
    "model": "lore.category",
    "pk": 13
},
{
    "fields": {
        "colour": null,
        "name": "Core (Cache system)",
        "slug": "core-cache-system"
    },
    "model": "lore.category",
    "pk": 14
},
{
    "fields": {
        "colour": null,
        "name": "Core (Mail)",
        "slug": "core-mail"
    },
    "model": "lore.category",
    "pk": 15
},
{
    "fields": {
        "colour": null,
        "name": "Core (Management commands)",
        "slug": "core-management-commands"
    },
    "model": "lore.category",
    "pk": 16
},
{
    "fields": {
        "colour": null,
        "name": "Core (Other)",
        "slug": "core-other"
    },
    "model": "lore.category",
    "pk": 17
},
{
    "fields": {
        "colour": null,
        "name": "Core (Serialization)",
        "slug": "core-serialization"
    },
    "model": "lore.category",
    "pk": 18
},
{
    "fields": {
        "colour": null,
        "name": "Core (System checks)",
        "slug": "core-system-checks"
    },
    "model": "lore.category",
    "pk": 19
},
{
    "fields": {
        "colour": null,
        "name": "Core (URLs)",
        "slug": "core-urls"
    },
    "model": "lore.category",
    "pk": 20
},
{
    "fields": {
        "colour": null,
        "name": "Database layer (models, ORM)",
        "slug": "database-layer-models-orm"
    },
    "model": "lore.category",
    "pk": 21
},
{
    "fields": {
        "colour": null,
        "name": "django-admin.py runserver",
        "slug": "django-adminpy-runserver"
    },
    "model": "lore.category",
    "pk": 22
},
{
    "fields": {
        "colour": null,
        "name": "*.djangoproject.com",
        "slug": "djangoprojectcom"
    },
    "model": "lore.category",
    "pk": 23
},
{
    "fields": {
        "colour": null,
        "name": "Documentation",
        "slug": "documentation"
    },
    "model": "lore.category",
    "pk": 24
},
{
    "fields": {
        "colour": null,
        "name": "File uploads/storage",
        "slug": "file-uploadsstorage"
    },
    "model": "lore.category",
    "pk": 25
},
{
    "fields": {
        "colour": null,
        "name": "Forms",
        "slug": "forms"
    },
    "model": "lore.category",
    "pk": 26
},
{
    "fields": {
        "colour": null,
        "name": "Generic views",
        "slug": "generic-views"
    },
    "model": "lore.category",
    "pk": 27
},
{
    "fields": {
        "colour": null,
        "name": "GIS",
        "slug": "gis"
    },
    "model": "lore.category",
    "pk": 28
},
{
    "fields": {
        "colour": null,
        "name": "HTTP handling",
        "slug": "http-handling"
    },
    "model": "lore.category",
    "pk": 29
},
{
    "fields": {
        "colour": null,
        "name": "Internationalization",
        "slug": "internationalization"
    },
    "model": "lore.category",
    "pk": 30
},
{
    "fields": {
        "colour": null,
        "name": "Metasystem",
        "slug": "metasystem"
    },
    "model": "lore.category",
    "pk": 31
},
{
    "fields": {
        "colour": null,
        "name": "Migrations",
        "slug": "migrations"
    },
    "model": "lore.category",
    "pk": 32
},
{
    "fields": {
        "colour": null,
        "name": "Packaging",
        "slug": "packaging"
    },
    "model": "lore.category",
    "pk": 33
},
{
    "fields": {
        "colour": null,
        "name": "Python 2",
        "slug": "python-2"
    },
    "model": "lore.category",
    "pk": 34
},
{
    "fields": {
        "colour": null,
        "name": "Python 3",
        "slug": "python-3"
    },
    "model": "lore.category",
    "pk": 35
},
{
    "fields": {
        "colour": null,
        "name": "Template system",
        "slug": "template-system"
    },
    "model": "lore.category",
    "pk": 36
},
{
    "fields": {
        "colour": null,
        "name": "Testing framework",
        "slug": "testing-framework"
    },
    "model": "lore.category",
    "pk": 37
},
{
    "fields": {
        "colour": null,
        "name": "Translations",
        "slug": "translations"
    },
    "model": "lore.category",
    "pk": 38
},
{
    "fields": {
        "colour": null,
        "name": "Uncategorized",
        "slug": "uncategorized"
    },
    "model": "lore.category",
    "pk": 39
},
{
    "fields": {
        "colour": null,
        "name": "Utilities",
        "slug": "utilities"
    },
    "model": "lore.category",
    "pk": 40
},
{
    "fields": {
        "colour": "",
        "name": "Django Sucks Collection",
        "slug": "django-sucks-collection"
    },
    "model": "lore.category",
    "pk": 41
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=bgV39DlmZ2U",
        "view_count": null,
        "speakers": [
            1
        ],
        "title": "The Dungeon Master's guide to Django's ORM",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "The Dungeon Master's guide to Django's ORM",
        "pyvideo_content": "Django's database layer is a necessarily complicated piece of code. It is a\nvery powerful API that works more or less seamlessly across multiple database\nstorage systems, smoothing over many of the inconsistencies and implementation\ndifferences that go with the territory. This is great for developers who use\nDjango.\n\nIt's a little less awesome for the maintainers of that code; working in that\nenvironment is fairly difficult. Still, we all like a challenge. Problem is:\nwhere to start? Coming to grips with the ORM code isn't easy. The code is well\nwritten and documented, but the entry points are particularly well highlighted\nand, really, the sheer mass of code is an obstacle to be overcome.\n\nThis talk will look at the various layers of the ORM, from the public\ngateways, to the semi-public doors into the implementation, to the deeper\ninternals and down to the interaction with databases. In effect, following the\njourney of a couple of adventurous young queries as they traverse the pathways\nto bring back some data, smelted into just the right format.\n\nThe goal is to provide some kind of mental map of the code. Some tips for\norienting yourself in the future and how to examine new nooks and corners\nwithout losing your mind. We obviously cannot cover everything, but let's go\nover the common paths and show how the other pieces hang off that backbone.\n\nAlong the way, we'll put some of the details into historical perspective.\nGetting inside the mind of previous adventurers might help understand why\nthings are the way they are.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1380,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "the-dungeon-masters-guide-to-djangos-orm",
        "categories": [
            23
        ],
        "language": "English",
        "pyvideo_tags": "[u'django', u'django-orm']",
        "pyvideo_summary": "If you've ever been curious about Django's ORM implementation, you will have\nnoticed the required learning curve. Some of the code is fairly complicated.\nOther bits are worse. Here comes a 30 or 40 minute guided tour of the\nuncharted realms: how the pieces fit together, where to look for things, why\nthe current design is what it is. A portion of this is my fault; I should\nprobably explain myself.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/bgV39DlmZ2U/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "bgV39DlmZ2U"
    },
    "model": "lore.talk",
    "pk": 1
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            62
        ],
        "title": "A socio-political analysis of open source community",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "A socio-political analysis of open source community",
        "pyvideo_content": "DjangoCon presents A socio-political analysis of open source community\n\nPresented by Ian Bicking\n\nCovers why are we doing what we're doing and why it matters in terms of Open\nSource and the movement. Focuses on the Django community, what's being\nproduced and finding meaning in that.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 22,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "a-socio-political-analysis-of-open-source-community",
        "categories": [
            39
        ],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'opensource']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 2
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            22
        ],
        "title": "Confessions of a life long Perl Bigot",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Confessions of a life long Perl Bigot",
        "pyvideo_content": "Confessions of a life long Perl Bigot\n\n  \nPresented by Frank Wiles\n\n  \nTalks about Django from the perspective of the Perl world.\n\n  \n[VIDEO HAS ISSUES: is quiet]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 30,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "confessions-of-a-life-long-perl-bigot",
        "categories": [
            39
        ],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 3
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            4
        ],
        "title": "Cowboy Development with Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Cowboy Development with Django",
        "pyvideo_content": "Cowboy development with Django\n\n  \nPresented by Simon Willison\n\n  \nHard to describe this talk--it's very entertaining.\n\n  \n[VIDEO HAS ISSUES: Audio is mostly in left speaker; lost audio at 36:45]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 24,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "cowboy-development-with-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 4
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            40
        ],
        "title": "Customizing your Satchmo Store",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Customizing your Satchmo Store",
        "pyvideo_content": "Customizing your satchmo store\n\n  \nPresented by Chris Moffitt\n\n  \nTalks about django development with satchmo. Satchmo is an open source\nframework for creating online stores.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "customizing-your-satchmo-store",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'satchmo']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 5
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Custom Signals for Uncoupled Design",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Custom Signals for Uncoupled Design",
        "pyvideo_content": "Custom Signals for Uncoupled Design\n\n  \nPresented by Bruce Kroeze\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 603,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "custom-signals-for-uncoupled-design",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 6
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            10
        ],
        "title": "Database Migrations, South, And You",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Database Migrations, South, And You",
        "pyvideo_content": "Database migrations, south and you\n\n  \nPresented by Andrew Godwin\n\n  \nTalks about south which makes it easier to do database migrations.\n\n  \n[VIDEO HAS ISSUES: audio tends towards left speaker]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 31,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "database-migrations-south-and-you",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'databasemigration', u'djangocon', u'djangocon2009', u'south']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 7
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            18
        ],
        "title": "Deploying Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Deploying Django",
        "pyvideo_content": "Deploying Django\n\n  \nPresented by Brian Rosner\n\n  \nTalks about deploying django sites.\n\n  \n[VIDEO HAS ISSUES: mostly in left speaker]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 25,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "deploying-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'deploy', u'deployment', u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 8
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            64
        ],
        "title": "Django is obsolete (but so is everything else)",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django is obsolete (but so is everything else)",
        "pyvideo_content": "Django is obsolete (but so is everything else)\n\n  \nPresented by Avi Bryant\n\n** Keynote for DjangoCon 2009.**\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 33,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "django-is-obsolete-but-so-is-everything-else",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 9
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            39
        ],
        "title": "Django on Jython: Ready for Production",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django on Jython: Ready for Production",
        "pyvideo_content": "Django on Jython: Ready for Production\n\n  \nPresented by Chris McAvoy\n\n  \nTalks about runnin Django on Jython. Walks through technical issues with\ngetting Django running on Jython, but also talks about why you might want to\ndo this and what it enables.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 7,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "django-on-jython-ready-for-production",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'jython']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 10
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Django Technical Design Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django Technical Design Panel",
        "pyvideo_content": "Django Technical Design Panel\n\n  \nFeaturing Joseph K, Russell Keith-Magee, Simon Willison, James Bennett, Brian\n\n  \nModerated question and answer period covering a bunch of topics.\n\n  \n[VIDEO HAS ISSUES: sound only from left speaker]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 23,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "django-technical-design-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 11
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            34
        ],
        "title": "Fighting malnutrition with SMS and Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Fighting malnutrition with SMS and Django",
        "pyvideo_content": "Fighting malnutrition with SMS and Django\n\n  \nPresented by Andy Mckay\n\n  \nCase study about using sms and django on a project called rapidsms.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 12,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "fighting-malnutrition-with-sms-and-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 12
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Google Summer of Code Overview Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Google Summer of Code Overview Panel",
        "pyvideo_content": "Google Summer of Code Overview Panel\n\n  \nFeaturing Zain Memon, Alex Gaynor, Honza Kral, Marc Garcia\n\n  \nModerated question and answer about GSOC and Django.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 10,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "google-summer-of-code-overview-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'gsoc']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 13
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            17
        ],
        "title": "How to Contribute to Pinax",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "How to Contribute to Pinax",
        "pyvideo_content": "How to Contribute to Pinax\n\n  \nPresented by James Tauber\n\n  \nTalks about what Pinax is and how to contribute to the Pinax project.\n\n  \n[Pinax project](http://pinaxproject.com/)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 28,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "how-to-contribute-to-pinax",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'pinax']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 14
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            23
        ],
        "title": "How to name your open source Django project after a famous Jazz musician, and concepts behind Django-Mingus, a project leveraging only reusable apps.",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "How to name your open source Django project after a famous Jazz musician, and concepts behind Django-Mingus, a project leveraging only reusable apps.",
        "pyvideo_content": "How to name your open source Django project after a famous Jazz musician, and\nconcepts behind Django-Minus, a project\n\n  \nPresented by Kevin Fricovsky\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 5,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "how-to-name-your-open-source-django-project-after-a-famous-jazz",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'mingus']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 15
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            17
        ],
        "title": "Introduction from the fake Jacob Kaplan-Moss",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Introduction from the fake Jacob Kaplan-Moss",
        "pyvideo_content": "Introduction from the fake Jacob Kaplan-Moss\n\n  \nPresented by James Tauber\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 34,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "introduction-from-the-fake-jacob-kaplan-moss",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 16
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "",
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            7,
            17
        ],
        "title": "Introduction to Pinax",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Introduction to Pinax",
        "pyvideo_content": "Introduction to Pinax\n\n  \nPresented by James Tauber and Daniel Greenfeld\n\n  \nWalks through what Pinax is, how it's useful to you, how to install it, and\nwalks through building a simple site using Pinax.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 20,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "introduction-to-pinax",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'pinax']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 17
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks Day 2",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks Day 2",
        "pyvideo_content": "Lightning Talks Day 2\n\n  \n(00:09) Dive into CPython Bytecode - Alex Gaynor\n\n  \n(05:10) Testing with pywatch - Chris Heisel\n\n  \n(07:08) Pluggable Django E-Commerce - Aaron Cuker and someone else\n\n  \n(12:13) Introduction to Surlex - Cody Soyland\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 14,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "lightning-talks-day-2",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'bytecode', u'cpython', u'djangocon', u'djangocon2009', u'pywatch', u'surlex', u'testing']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 18
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks Day 3",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks Day 3",
        "pyvideo_content": "Lightning Talks Day 3\n\n  \n(00:07) Solace, a multilingual support platform - Armin Ronacher\n\n  \n(03:50) Dig Deeper, Digging through the Django source code - ?\n\n  \n(09:50) PSF, Pony Magic - James Tauber\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 9,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "lightning-talks-day-3",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'cnotes', u'djangocon', u'djangocon2009', u'psf', u'solace']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 19
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "",
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            22
        ],
        "title": "Making your PostgreSQL database sing",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Making your PostgreSQL database sing",
        "pyvideo_content": "Making your PostgresSQL database sing\n\n  \nPresented by Frank Wiles at DjangoCon 2009\n\n  \nTalks about performance tuning with PostgresSQL.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 16,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "making-your-postgresql-database-sing",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'postgres', u'postgressql']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 20
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "No! Bad Pony!",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "No! Bad Pony!",
        "pyvideo_content": "No! Bad Pony!\n\n  \nPresented by Russell Keith-Magee\n\n  \nTalks about ponies, genesis of ponies, the history of the pony, magical\npowers, and everything else you want to know about ponies. Talks about how\ndjango feature proposals are handled.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 3,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "no-bad-pony",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'ponies']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 21
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            30
        ],
        "title": "Now What",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Now What",
        "pyvideo_content": "Now What\n\n  \nPresented by Ted Leung\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 8,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "now-what",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 22
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            46
        ],
        "title": "Painless Django app localization with Transifex",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Painless Django app localization with Transifex",
        "pyvideo_content": "Painless Django app localization with Transifex\n\n  \nPresented by Dimitris Glezos\n\n  \nTalks about Transifex, what it does, how it works, and how to use it to\nlocalize your application.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 11,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "painless-django-app-localization-with-transifex",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'localization', u'transifex']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 23
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            88
        ],
        "title": "Pluggable, Reusable Django Apps: A Use Case and Proposed Solution",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Pluggable, Reusable Django Apps: A Use Case and Proposed Solution",
        "pyvideo_content": "Pluggable, reusable, django apps: A use case and proposed solution\n\n  \nPresented by Shawn Rider and Nowell Strite\n\n  \nTalks about Django usage in PBS maintained sites.\n\n  \n[VIDEO HAS ISSUES: audio jumps around a bit]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 17,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "pluggable-reusable-django-apps-a-use-case-and-proposed-solution",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 24
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Real-time Web and Other Buzzwords",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Real-time Web and Other Buzzwords",
        "pyvideo_content": "  \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 19,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "real-time-web-and-other-buzzwords",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'comet', u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 25
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "RESTful Ponies",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "RESTful Ponies",
        "pyvideo_content": "  \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 26,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "restful-ponies",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'rest']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 26
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Scaling Django Web Applications",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Scaling Django Web Applications",
        "pyvideo_content": "  \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 13,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "scaling-django-web-applications",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'scaling']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 27
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Selling Django to Your Superiors: Success Stories Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Selling Django to Your Superiors: Success Stories Panel",
        "pyvideo_content": "  \nVideo freezes from 3:30-4:30, audio is fine.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 15,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "selling-django-to-your-superiors-success-stories-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 28
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "State of Pinax",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "State of Pinax",
        "pyvideo_content": "  \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 6,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "state-of-pinax",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'pinax']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 29
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            19
        ],
        "title": "Token Testing Talk",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Token Testing Talk",
        "pyvideo_content": "Token Testing Talk\n\n  \nPresented by Eric Holscher\n\n  \nTalks about testing in Django.\n\n  \n[VIDEO HAS ISSUES: audio in left channel only]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 29,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "token-testing-talk",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009', u'testing']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 30
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "UR DOING IT WRONG",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "UR DOING IT WRONG",
        "pyvideo_content": "UR DOIN IT WRONG\n\n  \nJames Bennett\n\n  \nTalks about new people having problems doing what they're trying to do with\nDjango. Some things discussed: not reading the documentation, learning Python\nas you go, ... Talks about the minimum Python you should know when working\nwith Django.\n\n  \n[VIDEO HAS ISSUES: audio is soft at the beginning]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 32,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "ur-doing-it-wrong",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 31
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Using Django in Non-Standard Ways",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Using Django in Non-Standard Ways",
        "pyvideo_content": "Using Django in Non-Standard Ways\n\n  \nEric Florenzano\n\n  \nFirst, tries to define what \"non-standard ways\" entails, then talks about\nusing Django in these ways.\n\n  \n[VIDEO HAS ISSUES: video freezes at times, but audio continues]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 21,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "using-django-in-non-standard-ways",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 32
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "What the Heck Went Wrong?",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "What the Heck Went Wrong?",
        "pyvideo_content": "What the heck went wrong?\n\n  \nAndy McKay\n\n  \nTalks about how to debug Django.\n\n  \n[VIDEO HAS ISSUES: audio in left speaker]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 27,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "what-the-heck-went-wrong",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'debugging', u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 33
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "When not to use the ORM: bulk data loading strategies for large datasets.",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "When not to use the ORM: bulk data loading strategies for large datasets.",
        "pyvideo_content": "When not to use the ORM: bulk data loading strategies for large datasets\n\n  \nJustin Bronn\n\n  \nTalks about data loading strategies for very large datasets and why not to use\nan ORM when doing it.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 4,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "when-not-to-use-the-orm-bulk-data-loading-strategies-for-large-",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'dataloading', u'djangocon', u'djangocon2009']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 34
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "",
        "youtube_title": null,
        "event": 9,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            38
        ],
        "title": "Introduction to GeoDjango",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Introduction to GeoDjango",
        "pyvideo_content": "\r\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 18,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": "2013-05-17T00:00:00Z",
        "slug": "introduction-to-geodjango",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "Gives an introduction to GeoDjango.",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 35
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            22
        ],
        "title": "Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles",
        "pyvideo_content": "Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles\n\nPresented by Frank Wiles\n\nWhile pre-optimization is often the root of all evil, knowing how to think\nabout performance and scalability are important skills for any geek. Learn\nabout all the knobs you didn't know you could or should tweak.\n\nAbstract\n\nCode profiling and dealing with your database aren't the only places to find\nperformance gains. Performance and scalability are holistic endeavors.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 41,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "alice-in-performanceland-down-the-rabbit-hole-with-frank-wiles",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'optimization', u'performance', u'scaling']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 36
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Alternative views",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Alternative views",
        "pyvideo_content": "Alternative views\n\nBen Firshman\n\nExploring the power of class-based views, their current status and how the\nconcepts behind them can be applied to other areas.\n\nAbstract\n\nGeneric views are quickly outgrown for all but the most simple of\napplications. They are often rewritten from scratch just to make small changes\nto functionality.\n\nIf you use class-based views, code can be reused by inheriting from more\nabstract views. They are provided with many reusable applications, but all\nimplemented in slightly different ways. It has been suggested a set of views\nbe supplied with Django to standardise the API.\n\nI will present some of the advantages and disadvantages of using class-based\nviews, and how they can help you develop more flexible applications in less\ntime.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 49,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "alternative-views",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'views']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 37
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            44,
            57
        ],
        "title": "Breaking down the process of building a custom CMS",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Breaking down the process of building a custom CMS",
        "pyvideo_content": "Breaking down the process of building a custom CMS\n\nPresented by Yann Malet, Brian Luft\n\nThe purpose of this talk is to share some of the important insights gained\nover a couple years of working on custom CMS-type projects serving large\norganizations. Acknowledging that approx. 30 minutes is a short time to cover\na broad subject, the focus of the talk would be on outlining a basic strategy\nfor managing large projects.\n\nAbstract\n\nOver the past couple of years, Brian and Yann's team have built and worked on\nseveral large Django projects for large organizations. They will discuss how\nto start and manage large CMS projects, with an emphasis on pointing people to\nthe best reference information and breaking down the common operations.\n\nThe primary discussion topics would cover:\n\n  * Breaking Down the Job: Over the course of the project you'll end up accounting for thousands of details; here's how to figure out the first few Centering Around a Prototype: Hedging your bets for the inevitable \"give me a ballpark figure\" \n  * Dealing With Legacy Data Stores: Migrate legacy information early and often. \n  * Selecting 3rd Party Components: Reuse exiting app, fork it early or Trailblaze \n  * Bad News: Django Ain't Perfect - where it has weaknesses and how to compensate \n\nAt the end of this talk the audience will be able to:\n\n    * Break down this type of project into meaningful phases \n    * Migrate large dataset to populate the django models that are still under development. \n    * Have a rational and objective approach to select django reusable component and understand how to refine them during the different stages of the project lifecycle. \n    * Find and evaluate quality information about the tradeoffs Django presents in these types of projects \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 61,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "breaking-down-the-process-of-building-a-custom-cms",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'development', u'djangocon', u'djangocon2010', u'projectmanagement']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 38
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            53,
            27
        ],
        "title": "Customizing the Django Admin",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Customizing the Django Admin",
        "pyvideo_content": "Customizing the Django Admin\n\nPresented by Peter Baumgartner, and Michael Trythall\n\nHow to build great admin user interfaces while still leveraging the power of\nthe Django's batteries-included admin.\n\nAbstract\n\nThe Django admin interface is a great tool for rapidly viewing and generating\ncontent, but its default one size fits all approach may not be the best for\nthe users of it.\n\nThis talk is broken into two parts. First, we will discuss user experience and\nwhat users have come to expect from an admin tool. In the second half, we'll\nshow you how to bend Django's admin to meet those expectations.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 56,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "customizing-the-django-admin",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'admin', u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 39
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            44
        ],
        "title": "Data Herding: How to Shepherd Your Flock Through Valleys of Darkness",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Data Herding: How to Shepherd Your Flock Through Valleys of Darkness",
        "pyvideo_content": "Data Herding: How to Shepherd Your Flock Through Valleys of Darkness\n\nPresented by Brian Luft\n\nLearn how to use common tools like the management shell, django-extensions,\nand iPython to craft an effective workflow whether you're building a new\nschema or migrating from old systems. We'll also look at how to take advantage\nof the latest ORM features.\n\nAbstract\n\nThe presentation would consist of walking through a few example scenarios\nwhere one would deal with processing or converting data in some manner. For\nexample, migrating from a large legacy database often brings a number of\ntedious problems. I would demonstrate how to work in an iterative, repeatable\nstyle using the Django sql management commands, a few iPython tricks, etc.\n\nAnother demonstration would be showing a team workflow for South migrations,\nillustrating how to deal with some common problems that crop up in practice.\n\nThe audience will leave with some solid techniques for dealing with a few\nspecific data management challenges. The unifying philosophy throughout is to\nbreak large, difficult problems into small, repeatable steps and audience\nmembers should also come away knowing how to select tools that help them work\nin this style.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 48,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "data-herding-how-to-shepherd-your-flock-through-valleys-of-dark",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'django-extensions', u'ipython', u'managementshell', u'orm']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 40
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            89
        ],
        "title": "Domain Specific Frameworks - Why they rock and what can we do to get more of them",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Domain Specific Frameworks - Why they rock and what can we do to get more of them",
        "pyvideo_content": "Domain Specific Frameworks - Why they rock and what we can do to get more of\nthem\n\nPresented by Sean O'Connor\n\nThis talk will provide an overview of some of the existing domain specific\nframeworks (DSFs) in the Python/Django world, review some of the common\npatterns used within them, and then explore some things which can be done to\nmake it easier for people to create and maintain DSFs.\n\nAbstract\n\nThere's a growing collection of tools such as Celery, ImageKit, and Piston\nwhich fall into a weird but wonderful space between utility libraries and full\nfledged applications. Much like Django, DSFs (domain specific frameworks)\nprovide more structure and have more opinion than utility libraries, but\nremain focused on providing developer instead of end-user level functionality.\nUnlike Django, DSFs focus on solving a very specific set of specific problems.\n\nThis talk will provide an overview of some of the existing DSFs in the\nPython/Django world, review some of the common patterns used within them, and\nthen explore some things which can be done to make it easier for people to\ncreate and maintain DSFs. Two of the DSFs to be discussed include Celery and\nImageKit. Some of the patterns to be reviewed include registration, backends,\nand framework integration/independence. Finally, the future facing discussion\nwill explore possible tools to make DSF building easier and steps general\npurpose frameworks (Django) can take to ease integration.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 54,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "domain-specific-frameworks-why-they-rock-and-what-can-we-do-to-",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'domainspecificframeworks', u'dsf']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 41
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "DSF Announcements and Q&A",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DSF Announcements and Q&A",
        "pyvideo_content": "DSF Announcements and Q & A\n\nPresented by Russell Keith-Magee\n\nThe Django software foundation is the entity which hold the IP for django and\nguides efforts to develop the community around Django. In this session several\nmembers of the DSF will be announcing some changes at the DSF and will be\navailable for a general Q&A.;\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 63,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "dsf-announcements-and-qa",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'dsf']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 42
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "First steps in performance tuning",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "First steps in performance tuning",
        "pyvideo_content": "First steps in performance tuning\n\nPresented by Russell Keith-Magee\n\nSo you've built your first Django website. You've tested it, you've released\nit, you've got a few customers... and a few more... and a few more... and now\nyou're having performance problems. What do you do? This talk will look at\nsome performance problems you may experience, and show some simple (and\ncreative) ways to squeeze the most out of your server hardware.\n\nAbstract\n\nThe talk is especially aimed at web developers that haven't got a background\nin computing, but nonetheless have fallen into a web development role. Topics\nwill include:\n\n  * How to work out that you have a problem \n  * Getting computation out of the request/response loop \n  * Caching -- when, how, and problems that caching introduces \n  * Setting up a webserver to avoid deadlocks \n  * Likely causes (and solutions) of database bottlenecks \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 57,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "first-steps-in-performance-tuning",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'performance', u'tuning']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 43
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "How to sell Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "How to sell Django",
        "pyvideo_content": "How to sell Django\n\nFeaturing Frank Wiles, Daniel Greenfeld, Peter Baumgartner, James Tauber,\nSteve Holden\n\nIt seems that a lot of people want to use Django (and Python), but their\ncustomer, management, or organization won't let them. Django is a great tool,\nbut it can be challenging to get in the door. This panel will explore how\ncompanies and individuals have successfully introduced Django, what tools are\navailable to sell Django, and what pitfalls there are to avoid.\n\nPossible questions will include:\n\n  * What is a good example success story you can share? \n  * How do you deal with organizations that have already spent bucketloads of money on a piss-poor technology stack, are hurting for it, but can't seem to let go? \n  * How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who stand to lose from introducing Django? \n  * What tools are available to help sell Django? \n\n[shmpe](http://shmpe.com/)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 53,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "how-to-sell-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'selling', u'shmpe']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 44
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            19
        ],
        "title": "Large Problems in Django, Mostly Solved",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Large Problems in Django, Mostly Solved",
        "pyvideo_content": "Large Problems in Django, Mostly Solved\n\nPresented by Eric Holscher\n\nThis talk is based on my popular series of blog posts highlighting\napplications from the community. I will highlight some of the best\napplications that the Django/Python community has put together, talk about\nplaces that are lacking, and talk about what these popular applications have\nin common.\n\nPart 1\n\nI have written a series of blog posts about \"Large problems\" in the community,\nand how they have been solved by members of our community with reusable apps.\nPreviously I have covered:\n\n  * Delayed Execution \n  * Search \n  * APIs \n  * Documentation \n  * Database Migrations \n\nI will update my thoughts on these issues, as well as talking about a couple\nof other new issues that I think that have been solved in a decent way. These\ninclude:\n\n  * Remote Command Execution \n  * Debugging in Development \n  * Continuous Integration \n\nPart 2\n\nIn this part I will highlight issues that are still headaches for the\nCommunity. These are places where there is a good chance for growth for third\nparty apps, and places where I have personally found some friction in my\ndevelopment. A couple examples of this are:\n\n  * Deployment \n  * Class Based Views / Thread Safety \n  * Debugging Production Environments \n\nPart 3\n\nFrom the above applications that are well done, what makes a popular reusable\napp? This won't be my thoughts, but more looking at apps that have been\nsuccessful and trying to see what they have in common. A good app and a good\nreusable app are necessarily different, and I think it will be interesting to\nlook at what traits make reusable apps popular.\n\n[Large problems posts](http://ericholscher.com/tag/largeproblems/)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 52,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "large-problems-in-django-mostly-solved",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'api', u'ci', u'continuousintegration', u'databasemigrations', u'debugging', u'delayedexecutions', u'deployment', u'djangocon', u'djangocon2010', u'documentation', u'migrations', u'safety', u'search']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 45
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            14
        ],
        "title": "Learning a new codebase",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Learning a new codebase",
        "pyvideo_content": "Learning a new codebase\n\nPresented by Justin Lilly\n\nThis talk will be on methods of reading code for comprehension. While the\nproject will be walking through various third-party Django apps, the\nexperiences and conclusions are drawn from joining a large, existing Django\nproject which lacked documentation.\n\nAbstract\n\nIn the broadest sense, this talk is on how to read code. More than this, it is\na series of methods and practices which one can follow to get up to speed on a\nnew codebase. The subject of this talk will be open-sourced Django projects,\nbut many of the experiences which fuel this talk will be based on joining a\nnew team. It will cover tracing execution paths, finding the more interesting\nportions of a codebase, as well as how to address any issues you may have\nfound in it.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 40,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "learning-a-new-codebase",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'programming']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 46
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks - Day 1",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks - Day 1",
        "pyvideo_content": "Lightning Talks\n\n  * 00:00 - David Gouldin: Hash Signaling Made Easy (http://github.com/dgouldin/django-hashsignal) \n  * 05:20 - Tareque Mossain: Django ORM Tips \n  * 11:20 - Nathan?: OpenID in Django \n  * 18:00 - Ben? and Jeremy?: Django efficacy project--call for case studies \n  * 19:40 - Tobias McNulty: django.contrib.messages and contributing to Django core \n  * 25:00 - Jason ?: Django Config Store (http://github.com/zbyte64/django-configstore \n  * 28:25 - Niall Kelly: Giving Django a new front door \n  * 32:00 - Justin Lilly: Meetup Meeter \n  * 33:50 - Jesse Noller: WTF: PSF and DSF \n  * 40:00 - dmoisset ?: How request routing should be \n  * 45:30 - Gabriel Falcao: Feeding your ponies with lettuce (http://lettuce.it/) \n  * 50:40 - Nate Aune: djangozoom: Effortless cloud deployment (http://djangozoom.com/ponyexpress) \n\n[NOTE: If you know the people whose names have a ?, please add a comment so we\ncan fix it in the description. Thanks!]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 35,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "lightning-talks-day-1",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django-configstore', u'django.contrib.messages', u'django-hashsignal', u'djangozoom', u'dsf', u'hash-signaling', u'lettuce', u'openid', u'orm', u'psf', u'routing']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 47
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            56
        ],
        "title": "Making the leap to Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Making the leap to Django",
        "pyvideo_content": "Making the leap to Django\n\nPresented by Terry J. Owen\n\nHow to move your small development team from PHP to Django in less than a\nmonth.\n\nAbstract\n\nThe Victoria Advocate was once a purely PHP development shop. But over the\ncourse of one month the development manager said \"we need to move to Django.\"\n\nThis talk will focus on some of the challenges and successes experienced\nduring this month.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 66,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "making-the-leap-to-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'casestudy', u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 48
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Maps of Imaginary Lands",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Maps of Imaginary Lands",
        "pyvideo_content": "Maps of Imaginary Lands\n\nMalcolm Tredinnick\n\nThe GIS features of Django aren't restricted to being applied to real world\nmaps and planets. This talk will show how to display and interact with maps of\nimaginary lands, such as game maps or lands in science fiction novels. We'll\nuncover a bit of how Django GIS works in the process, separating the map\ndisplay from the modeling.\n\nAbstract\n\nWhilst django.contrib.gis isn't particularly difficult to get started with,\nparticularly if you follow the tutorials, it can sometimes seem a bit\noverwhelming in the way it goes from zero to fancy maps in only a couple of\nsteps. I'd like to demystify some of the pieces of the stack, pulling apart\nthe modeling support \u2014 specifying the data are we trying to work with \u2014 from\nthe display and client-side portion.\n\nTo make this more than a dry technical dive, I'll show how to add extras to an\nimaginary map, rather than something pulled from Google Maps or Open Street\nMap. We'll take on the task of plotting features on a landscape from a\npotential role-playing game and show how the GIS data manipulation features,\nsuch as calculating region intersections, nearby points, and javascript\nclient-side display work the in a familiar way against this slightly unusual\nbackground.\n\nSome basic familiarity with Django's GIS features would be useful for this\ntalk, although it might also serve as a motivating introduction to trying\nthings out. The code shown will be available for download after the talk.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 60,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "maps-of-imaginary-lands",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'geodjango', u'gis']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 49
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            42
        ],
        "title": "Massaging the Pony: Message Queues and You",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Massaging the Pony: Message Queues and You",
        "pyvideo_content": "Massaging the Pony: Message Queues and You\n\nPresented by Shawn Rider\n\nMessage queues are a potential solution for any site that needs to facilitate\nrobust asynchronous operations on your website including carrying out\nintensive or long-running actions or synchronizing off-site services. We will\nlook at how PBS has used Celery and RabbitMQ to provide more reliable service\nand how to set up a robust message queue solution in a cloud hosting\nenvironment.\n\nAbstract\n\nIn maintaining several different site projects written in Django over the past\nfour years, the PBS Education team repeatedly found the need for the ability\nto create asynchronous processes that could handle long-running actions and\nmission-critical synchronization. We needed a way to handle tasks such as\ngenerating reports on large data sets and executing remote processes on fussy\nthird-party services. The clear solution to the problems we encountered was to\nimplement a robust message queue solution.\n\nMessage queues allow sites to execute processes outside the normal HTTP\nrequest cycle and then deliver the results of those processes in a variety of\nways. After a survey of all available message queue solutions we settled on a\ncombination of Celery and RabbitMQ to create a reliable, always-available\nsystem that can handle mission-critical tasks. We can easily develop against a\nmessage queue in our development builds, and we have an infrastucture based in\na cloud hosting service that allows us to rely on the message queue without\nreservation.\n\nIn this talk will will look at what a message queue does for your site, how to\nimplement a message queue in your Django code, and how to set up a reliable\nmessage queue infrastructure on your servers. We will show examples from some\nof our sites at PBS so it is clear how message queues work and to present some\ncommon use cases that warrant a message queue solution. We will also discuss\nsome of the design patterns that made it easy to switch to message queue based\nprocessing for discreet tasks, as well as some of the things we learned that\nhave made the solution even easier to implement for new tasks.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 39,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "massaging-the-pony-message-queues-and-you",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'celery', u'djangocon', u'djangocon2010', u'messagequeues', u'queues', u'rabbitmq']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 50
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            1
        ],
        "title": "Modeling challenges",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Modeling challenges",
        "pyvideo_content": "Modeling Challenges\n\nPresented by Malcolm Tredinnick\n\nHow would you model players, umpires and coaches in baseball data when the\nsame person can switch roles over the course of their life? How about servers\nin racks with power boards attached (and cords running across the room to\nremote boards)? Come along to see one approach to create minimal and well-\nperforming models for such real-life situations.\n\nAbstract\n\nThe slightly over-simplified but useful rule of thumb when creating database\nschema is \u201cnormalize until it hurts, [then] denormalize until it works.\u201d If\nonly people didn\u2019t skip the first step so often. Using a data modeling layer,\nsuch as Django's models, doesn't absolve the system architects from the need\nto create good design. It also doesn't require them to do so, since you can\nget away with a lot of sub-optimality with many data sets.\n\nThe real difficulty here, though, is that the trade-off between text-book\nideal modeling and easy to use is difficult to judge and takes practice to\ndevelop.\n\nThis talk will walk some interesting cases of model design that I've\nencountered recently. I'll explain how I approached the problem and what we\nended up with. These will include:\n\n  * Modeling people who might simultaneously play different roles in the system. For example, a person who was a baseball player and then became a coach \u2014 each role has different attributes attached to it. \n  * Modeling what appears to be a triangular dependency relationship with minimal redundancy in the data description and without needing really long query filters to access things. \n  * Handling date ranges (or other measured data) of different degrees of accuracy and precision. \n\nThis won't be a talk on theoretical database design. Rather, concrete examples\nof creating such designs and guiding the decisions by what might work best in\nthe final Django code. Hopefully, by listening to one person's approach\n(mine!), people faced with similar challenges will have another possible\nattack method in their toolbox.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 42,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "modeling-challenges",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'model']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 51
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            1
        ],
        "title": "Multi-database patterns",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Multi-database patterns",
        "pyvideo_content": "Multi-database patterns\n\nPresented by Malcolm Tredinnick\n\nA tour through four common \"multiple database\" usage patterns and how they can\nbe implemented and utilised with Django. We'll talk about the strengths and\nweaknesses of each pattern and why you might not need any of them.\n\nAbstract\n\nThere are a few good reasons a system might want to interact regularly with\nmultiple databases. \u201cBecause it\u2019s what cool people do\u201d is not one of those\nreasons. Most multi-database usages fall into one of four main classes:\n\n  * Separation by function. All data of one type in one database, all data of another type in some other database. \n  * Separation by sharding. Data of a particular type (e.g. user records) is split across multiple databases, each database holding a shard of the whole data. \n  * Data replication (separation by access). Some pieces of data are synchronized to multiple machines. Writes might go into one or more masters and reads normally come from the slaves. \n  * Data augmentation/shadowing. Data in one database is added to or entirely replaced by data from another database. Can happen during development when reading from a production snapshot whilst trying out changes to some tables or data only against a local database. \n\nObviously, combinations of these classes are possible, such as replicated\nsharded data in a huge site. There are tricks and traps to the way a developer\ntalks to each of these sorts of setups. I'll spend a few minutes showing\ncredible examples of the usage of each as well as when you might be over-\nengineering by going that way. All four access patterns are possible in Django\n1.2, with varying degrees of ease of use and I'll show the type of code\nrequired in each case.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 38,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "multi-database-patterns",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'database', u'djangocon', u'djangocon2010', u'multipledatabases']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 52
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "NoSQL and Django Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "NoSQL and Django Panel",
        "pyvideo_content": "NoSQL and Django Panel\n\nFeaturing Jacob Burch, Russel Keith-Magee, Noah Silas, Michael Richardson,\nEric Florenzano, Curt Micol\n\nA panel to discuss the future of no-sql/non-related databases in Django.\n\nAbstract\n\nThe proliferation of non-SQL speaking datastores has caused a lot of discourse\nand debate over their potential role in Django's decidedly SQL-speaking ORM.\nThe goal of this panel is to consolidate and discuss the root questions of\nthis debate.\n\nThe panel will consist of Django orm contributors and heavy end-users of both\nDjango and a variety of NoSQL database solutions. Questions to the panel will\nbriefly cover the NoSQL movement in general and it's staying power. After that\nintroduction to the debates at hand outside of Django, questions will shift to\nfocus closely on the issues into integrating NoSQL and Django--both on current\nbest practices and future plans for integrating it into the core.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 47,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "nosql-and-django-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'casestudy', u'djangocon', u'djangocon2010', u'nosql', u'orm']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 53
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Pony Pwning",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Pony Pwning",
        "pyvideo_content": "Pony Pwning\n\nAdam Baldwin\n\nDjango's awesomeness unfortunately doesn't make it impenetrable. This talk\nwill cover common pitfalls of the Django developer as seen through the eyes of\na hacker or malicious user.\n\nAbstract\n\nDjango is arguably the most secure web framework. The Django team have done an\nexcellent job making secure-by-default decisions for our web applications in\nmany situations. Still, the last mile in development is where the bulk of\nsecurity vulnerabilities can be introduced and Django's powerful flexibility\nallows for plenty of rope for developers to hang themselves. Understanding the\nvulnerabilities that can be created by common mistakes or misconceptions and\noverlooked details in development will be useful for any Django user.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 58,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "pony-pwning",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'security']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 54
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            9
        ],
        "title": "Rethinking the Reusable Application Paradigm",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Rethinking the Reusable Application Paradigm",
        "pyvideo_content": "Rethinking the Reusable Application Paradigm\n\nPresented by Alex Gaynor\n\nFor the past few years the reusable application paradigm has been considered\none of the major selling points of Django, however the common wisdom about\nwhat it means to make an application reusable isn't really accurate. This talk\nis going to discuss ways to truly make your applications reusable across *any*\nproject.\n\nAbstract\n\nThe common wisdom about reusable application says to do things like let your\nviews take arguments for things like the form class or the template name.\nHowever, that doesn't satisfy most of the real need for extendability:\nchanging the business logic or altering models. This talk is going to look at\nways to combat these limitations:\n\n  * Class based views \n  * By making everything overidable in a view you can absolutely minimize the need to \"copy-paste\" when changing the logic of things around. \n  * As seen in the admin. \n  * Do less \n  * brabeion \n  * Provide the absolute minimum at the model layer, and only small wrappers for the business logic users can implement their own logic to control how things happen. \n  * Related to the idea of \"application frameworks\". Providing the tools for others to build their logic around various helpers. \n  * Flexibility \n  * django-taggit \n  * Provide a concrete implementation, but allow swapping out of various layers. \n  * Don't like the Tag model, swap it out, want a new intermediary model, swap it out. \n  * django-registration \n  * Providing swappable backends to change behavior. \n  * Libraries \n  * django-filter \n  * django-fixture-generator \n  * django-templatetag-sugar \n  * django-compressor \n  * Providing tools for others to build around. \n\nBy using these techniques you can develop reusable application that work\nbeyond any single use case. Of course there are cases where you don't need any\nof these, and just need something that fits \"traditional\" reusable application\nparadigm, so this talk will cover when that works as well.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 51,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "rethinking-the-reusable-application-paradigm",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'modularizing', u'reuse', u'reusing']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 55
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Scaling the World's Largest Django Application",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Scaling the World's Largest Django Application",
        "pyvideo_content": "  \nDisqus, one of the largest Django applications in the world, will explain how\nthey deal with scaling complexities in a small startup.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 36,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "scaling-the-worlds-largest-django-application",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 56
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "So you want to be a core developer?",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "So you want to be a core developer?",
        "pyvideo_content": "So you want to be a core developer?\n\nPresented by Russell Keith-Magee\n\nThe most important part of Django is its community of contributors -- without\ncontributors, Django would never improve. However, as a newcomer to Django,\nthe prospect of contributing may be somewhat daunting. This presentation will\nshow you how to make the transition from user to contributor -- what to do,\nhow to do it, and some guidelines on how to do the job well.\n\nThe aim of this presentation is to explain how we do things in the core, and\nhow to work with us to get the job done. It will cover dealing with Trac and\nthe triage lifecycle, how to find tickets to triage, other non-obvious ways to\ncontribute, and cover some basic design philosophies.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 62,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "so-you-want-to-be-a-core-developer",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'core', u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 57
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "Sprints Kickoff",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Sprints Kickoff",
        "pyvideo_content": "Sprints Kickoff\n\nPresented by Russell Keith-Magee\n\nThis is the sprints kickoff where Russell explains how sprints work and what\nto expect.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 37,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "sprints-kickoff",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'sprints']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 58
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "State of Pinax",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "State of Pinax",
        "pyvideo_content": "State of Pinax\n\nBrian Rosner\n\nPinax is a platform for rapidly building websites with Django. This talk will\ncover what has happened with Pinax over the past year and where it will go in\nthe future.\n\nAbstract\n\nPinax is a platform for rapidly building websites. It leverages Django in as\nmany ways possible. It handles the parts which are common amongst many sites\nleaving you mostly worrying about what makes your site different.\n\nThe beginning of the talk will cover how Pinax started and where the project\nis today, and review some sites built with Pinax over the past year.\n\nThe Pinax team has been hard at work with 0.9. This talk will highlight the\nimportant improvements and fixes made to Pinax since 0.7:\n\n  * removed requirement of pinax-boot.py \n  * enabled pip install Pinax \n  * upgraded to Django 1.2 \n  * improved account, waiting list and groups \n  * introduced new starter projects \n\nThe \"must-haves\" for the next release are to add or improve:\n\n  * per-object permissions \n  * e-mail backends \n  * friends and invitations \n  * tagging (move to django-taggit) \n  * notifications / activity streams \n  * wikis (change over wiki to wakawaka) \n  * blogs (change over blog to biblion) \n  * photos \n  * profiles (to give a good answer to: \"How do I add more fields to a user?\") \n\nThis talk will cover starter projects, and the layer zero concept implemented\nin Pinax by default. The talk will demo a couple starter projects created\nusing setup_project.\n\nFinally, the talk will cover some relevant stats over the past year, and a\nroadmap for the future.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 55,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "state-of-pinax",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'pinax']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 59
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            10
        ],
        "title": "Step Away From That Database",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Step Away From That Database",
        "pyvideo_content": "Step away from that database\n\nPresented by Andrew Godwin\n\nA look at the large array of database types now available: where each one\nexcels, why NoSQL isn't always best, and the best ways to integrate them into\nyour Django project.\n\nAbstract\n\nIn the last few years we've seen an explosion in the number of production-\nready databases available for web applications. From relational to document-\noriented, key-value and more, there's a staggering array of choice.\n\nThis talk covers the various basic types of database now available, and\nhighlights their weaknesses, their strengths, and the features you just can't\nget from traditional databases.\n\nThen, after a short rant about the term \"NoSQL\", learn how to best integrate\nthem into your Django projects, why being schemaless isn't as good as it looks\nat first, and how relational databases are keeping up with the times.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 67,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "step-away-from-that-database",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'databasemigration', u'databasemigrations', u'djangocon', u'djangocon2010', u'migration', u'migrations', u'south']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 60
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "http://blip.tv/file/4106752",
        "view_count": null,
        "speakers": [
            81
        ],
        "title": "Switching addons.mozilla.org from CakePHP to Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Switching addons.mozilla.org from CakePHP to Django",
        "pyvideo_content": "Switching addons.mozilla.org from CakePHP to Django\n\nPresented by Jeff Balogh\n\nIn January of 2010 Mozilla started switching addons.mozilla.org (AMO) from\nCakePHP to Django. We see about 120 million web requests per month and 1.4\nmillion visitors per day. This talk will be a case study of scaling and\ndeploying a large website (and getting faster than PHP) with MySQL, memcached,\nvirtualenv, Celery, Hudson, Redis, MongoDB, and more.\n\nAbstract\n\nTo scale the backend of AMO, we rely heavily on caching in memcached (and soon\nRedis) to keep the load off our database, and multidb to spread the load we\ncan't dump off on cache. Our caching ranges from object and query caching, to\ntemplate fragment caching, up to full response caching. Frontend caching is\nexternal to Django and won't be covered. In addition, we work hard to measure\nand improve raw speed. Hitting indexes and keeping datasets small is critical,\nand the Django ecosystem has many great tools to help us profile.\n\nWe create development environments using pip and virtualenv, so we naturally\nstarted using that setup to deploy the site in production. We ran into issues\ncreating a reliable environment with this method; switching to a separate\nvendor repository solved our problems with only a small amount of added\neffort. We update and deploy new code at least once a week, and have to deal\nwith the additional complication of managing and interacting with parts of the\nPHP site that have not been ported over.\n\nApart from scaling and deployment, we've customized our application in ways\nthat could be interesting to other Django users:\n\n  * Jinja is our templating engine (but we keep the admin working) \n  * Babel helps us localize the site in over 30 languages \n  * Sphinx (not the documentation tool) serves our search results \n  * Celery and RabbitMQ help us do offline processing \n  * Nose and Hudson help us get over 90% code coverage in tests \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 59,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "switching-addonsmozillaorg-from-cakephp-to-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'casestudy', u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 61
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            42
        ],
        "title": "Teaching an Old Pony New Tricks: Maintaining and Updating an Aging Django Project",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Teaching an Old Pony New Tricks: Maintaining and Updating an Aging Django Project",
        "pyvideo_content": "Teaching an Old Pony New Tricks: Maintaining and Updating an Aging Django\nProject\n\nPresented by Shawn Rider\n\nPBS began development on its first Django project in 2006 using Django 0.96.\nPBS TeacherLine launched in 2007 and continues to run today. This talk will\ndiscuss the process for designing the PBS TeacherLine codebase, how new\nadvanced features were added over the years, and pitfalls you can avoid when\nplanning projects for longevity and easy maintenance.\n\nAbstract\n\nPBS chose Django after seeing a presentation by Jacob Kaplan-Moss and Adrian\nHolovaty at OSCON 2006. That Fall, PBS Education began work on a new version\nof the PBS TeacherLine website. The site most users see when they visit PBS\nTeacherLine is essentially a brochure and catalog that allows educators to\npurchase seats in online professional development courses. However, behind the\nscenes is an administrative infrastructure that allows over 50 PBS stations\nand PBS national staff members to administrate hundreds of course sections and\nover ten thousand learners every year. There are robust features for\naccounting, reporting, student and staff management just to name a few.\n\nThe TeacherLine website was initially written using Django 0.96. The site is\ncurrently running Django 1.2 and has had major upgrades made to some of the\ncore systems including the implementation of a robust message queue solution\nto handle the most intense administrative functions. Over the past four years,\nthe PBS Education Technology Team has learned many lessons about system\ndesign, best practices, handling upgrades, and creating Django-based code that\nis flexible and easy to maintain.\n\nIn this discussion we will look at some of the more interesting points in the\nhistory of PBS TeacherLine, including design patterns, workarounds that were\neventually made obsolete by improvements in the Django framework, and the\nprocess of iteratively improving functionality and features. We will discuss\nsuccesses and failures, including the pitfalls we avoided and (perhaps more\ninterestingly) those we did not.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 65,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "teaching-an-old-pony-new-tricks-maintaining-and-updating-an-agi",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'maintenance', u'updating']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 62
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Technical Design Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Technical Design Panel",
        "pyvideo_content": "Technical Design Panel\n\nFeaturing Justin Braun, Karen Tracy, Russel Keith-Magee, Brian Rosner, Janis\nLeidel, Gary Wilson\n\nCome one! Come all! Pay sixpence to see the freaks! Real Live Core Developers,\nanswering questions for your edification!\n\nAbstract\n\nThis is a repeat of the ever-popular \"hit the core developers with hard\nquestions\" panel.\n\nCovers issues brought up by Eric's talk, checkin rights, portable apps, the\nglobal settings file, backwards incompatible changes, contrib, educating users\non finding tools and libraries, what's coming in django 1.3, memory usage in\ndjango, required resources for django core development, best part of django\ntoday, and problems with external dependencies not shipped with django.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 43,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "technical-design-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 63
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            5
        ],
        "title": "Topics of Interest",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Topics of Interest",
        "pyvideo_content": "Topics of Interest\n\nPresented by James Bennett\n\nInspired by Ian Bicking's session of the same name at PyCon 2009, this will be\na somewhat eclectic talk covering various subjects near and dear to the\nspeaker's heart, including Django's release process, best practices for\napplication development and what the future holds for our favorite Python web\nframework.\n\nAbstract\n\nThis talk will come in, roughly, four parts:\n\n  * The release process \n    * How Django gets made \n    * Things we've screwed up \n    * Things (I think) we've gotten right \n    * The unsung heroes who make Django happen \n  * The state of Django applications \n    * A summary of current best practices for development, documentation, packaging, collaboration, etc. \n    * Common issues and ways to fix them \n    * \"There's an app for that\" and its discontents \n  * The future \n    * Musings on Django 1.3 and 1.4 \n    * Python 3: when will we get there, and what will it mean for us? \n    * The world is changing; how can we change with it? \n  * General Q&A;\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 45,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "topics-of-interest",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 64
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            44
        ],
        "title": "Treehugging",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Treehugging",
        "pyvideo_content": "Treehugging\n\nPresented by Brian Luft\n\nHierarchical data sprouts up almost everywhere, but not all trees look alike.\nLearn to how tell them apart and love them all in Django.\n\nAbstract\n\nThis talk would cover some common examples of hierarchical data in web\napplications and then review solutions like django-mptt and django-treebeard.\nRather than trying to cover tree algorithms in-depth, the focus would be on\nbest practices for querying and rendering trees in your Django apps.\n\nThis talk is not geared for the smart kids; they already know this stuff. It\nis intended to help less experienced developers take advantage of patterns\nwithout needing to worry about the deeper concepts.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 50,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "treehugging",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010', u'django-mptt', u'django-treebeard', u'graphs', u'structureddata']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 65
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            17
        ],
        "title": "Typewar: A Case Study",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Typewar: A Case Study",
        "pyvideo_content": "Typewar: A Case Study\n\nPresented by James Tauber\n\nTypewar is a popular font-guessing game built with Django and Pinax. This talk\nwill cover everything from game mechanics and statistics to development of an\nAPI for an iPhone client and from how we promoted and launched the site to the\nperformance challenges we faced.\n\nAbstract\n\nTypewar was developed as a side project at Eldarion and went from concept to\nlaunch in a matter of weeks. The first day saw 5,000 visitors and since then,\nover 50,000 people have attempted to \"guess the typeface\" more than 5 million\ntimes.\n\nThe talk will cover:\n\n  * how we went from concept to design mockup to prototype \n  * game mechanics such as: \n    * points \n    * levels \n    * badges \n    * streaks \n    * leader boards \n    * stats (with lots of bayesian goodness) \n  * generation of glyphs with PIL \n  * mitigation against cheaters \n  * twitter integration \n  * migrating unauthenticated user data over on sign up / log in \n  * activity streams \n  * performance challenges \n  * database optimizations \n  * queuing of asynchronous tasks \n  * development of an API for use in an iPhone client \n  * deployment \n  * how we promoted and launched the site \n\nWe will also discuss various open source Django apps that have been extracted\nfrom the project and used on subsequent sites by us and others.\n\n[http://typewar.com/](http://typewar.com/)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 64,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "typewar-a-case-study",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'casestudy', u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 66
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            31
        ],
        "title": "Welcome and Chairman's Address",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Welcome and Chairman's Address",
        "pyvideo_content": "Welcome and Chairman's Address\n\nPresented by Steve Holden\n\n[VIDEO HAS ISSUES: Looks like the presentation started before recording.]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 46,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "welcome-and-chairmans-address",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 67
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 10,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            20
        ],
        "title": "Why Django Sucks, and How We Can Fix It",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Why Django Sucks, and How We Can Fix It",
        "pyvideo_content": "Why Django Sucks, and How We Can Fix It\n\nPresented by Eric Florenzano\n\nEric Florenzano trolls DjangoCon. He identifies problems with Django ranging\nfrom app structure, to settings, to the development process, to the community,\nand more. Some of the problems he identifies have been around since the\nbeginning, and some are emerging as Django matures. It's not all gloom\u2014the\nlatter half of the talk focuses on proposals on how to tackle these issues\nthat face Django.\n\nAbstract\n\nThis talk focuses on real problems that people face when using Django every\nday. It dives down and attempts to find root causes for each of these\nproblems. Essentially, what are the things that suck about Django?\n\nThen the talk walks point-by-point for each of the things that suck, and\nprovides suggestions for actions that the Django community can take to make\nthem suck less.\n\nThe goal here is to start a discussion, to bring to light the problems that\ntend to be ignored, and to have a little fun in the process.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 44,
        "pyvideo_copyright": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
        "date_delivered": null,
        "slug": "why-django-sucks-and-how-we-can-fix-it",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2010']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 68
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/82_advanced-django-form-usage.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            7,
            73
        ],
        "title": "Advanced Django Form Usage",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Advanced Django Form Usage",
        "pyvideo_content": "Advanced Django Form Usage\n\nPresented by Daniel Greenfeld, Miguel Araujo\n\nDjango forms are really powerful but there are edge cases that can cause a bit\nof anguish. This talk will go over how to handle many common solutions not\ncurrently described in the core documentation. It will also cover some useful\nthird-party libraries and will end with clarifications about what the state of\nform features will be in Django 1.4.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 82,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "advanced-django-form-usage",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'forms', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 69
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/80_advanced-security-topics.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            79
        ],
        "title": "Advanced security topics",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Advanced security topics",
        "pyvideo_content": "Advanced security topics\n\nPresented by Paul McMillan\n\nAn in-depth look (with demonstrations) at the how and why of several advanced\nsecurity topics. Discussion of ways to improve security of the framework\nmoving forward.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 80,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "advanced-security-topics",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'security', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 70
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/91_a-little-south-sanity.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            44
        ],
        "title": "A Little South Sanity",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "A Little South Sanity",
        "pyvideo_content": "A Little South Sanity\n\nPresented by Brian Luft\n\nSouth is a useful tool in agile development environments, but learning to use\nit effectively can take some practice. In this demo-driven talk we'll walk\nthrough some common workflow examples, dissect a couple pitfalls, and call out\nthe relative strengths and weaknesses of South as a tool at each step. Finding\nSouth's sweet spot for your environment will give you the best results.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 91,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "a-little-south-sanity",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'south']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 71
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/68_a-summer-in-the-wild.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            9
        ],
        "title": "A Summer in the Wild",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "A Summer in the Wild",
        "pyvideo_content": "A summer in the wild\n\nPresented by Alex Gaynor\n\nI've spent this past summer away from Django, working for Quora, venturing\ninto the depths of a foreign codebase, and making it faster by running on\nPyPy. This talk will feature the lessons I've learned about Django, PyPy, and\nweb development in general.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 68,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "a-summer-in-the-wild",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'pypy', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 72
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/84_benevolent-designer-for-life-s-keynote-designers-make-it-go-to-eleven.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            36
        ],
        "title": "Benevolent Designer For Life's Keynote - Designers Make It Go to Eleven",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Benevolent Designer For Life's Keynote - Designers Make It Go to Eleven",
        "pyvideo_content": "Benevolent Designer for Life's Keynote: Designers make it go to eleven\n\nPresented by Idan Gazit\n\nThe open-source world is and always has been focused on code; attention and\nrespect doled out in exchange for patches. As a result, many open-source\nprojects want for design love but don't know how to secure it. We scare off\npotential contributors from the many fields beneath the aegis of \"design\":\nuser experience, user interfaces, usability, interaction design, information\narchitects, graphic design, typography, and other roles assumed by the authors\nof our markup and styling. Django can be a model citizen among open-source\nprojects in changing these attitudes and coaxing contributors out of the\nwoodwork -- not just for the benefit of the framework, but for the\nconstellation of 3rd party apps which make Django great. Other FOSS\ncommunities have made efforts that we can learn from, and the fight to change\nperceptions is less uphill than you might think. This talk will cover: -\nMisconceptions of \"Design.\" What is design, and what do designers do? - A\nbrief trip down memory lane, and how Django came to be relatively designer-\nfriendly. - \"I don't get it: what is the BDesignFL role?\" - Process and tools:\nHow can Django better engage designers, for core's benefit and for the benefit\nof _your projects_. How can we help these contributors get over the \"suck\"\nthreshold? - What parts of core are ripe for love from designers? What 3rd\nparty projects?\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 84,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "benevolent-designer-for-lifes-keynote-designers-make-it-go-to-e",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'design', u'djangocon', u'djangocon2011', u'ui', u'ux']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 73
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/86_best-practices-for-front-end-django-developers.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Best Practices for Front-End Django Developers",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Best Practices for Front-End Django Developers",
        "pyvideo_content": "Best Practices for Front-End Django Developers\n\nChristine Cheung\n\nConsiderations, best practices, tools, and more for front-end development in\nDjango.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 86,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "best-practices-for-front-end-django-developers",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'bestpractices', u'djangocon', u'djangocon2011', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 74
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/90_building-apis-in-django-with-tastypie.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Building APIs in Django with Tastypie",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Building APIs in Django with Tastypie",
        "pyvideo_content": "Building APIs in Django with Tastypie\n\nIssac Kelly\n\nTastypie is one of a couple of frameworks for building APIs with Django. Issac\nwill go over some of the reasons you might pick Tastypie, and how to implement\na Tastypie on top of an existing Django project.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 90,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "building-apis-in-django-with-tastypie",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'tastypie']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 75
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/75_cache-rules-everything-around-me.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            26,
            80
        ],
        "title": "Cache rules everything around me",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Cache rules everything around me",
        "pyvideo_content": "Cache rules everything around me\n\nPresented by Jacob Burch, Noah Silas\n\nThis talk aims to briefly introduce the core concepts of caching and covers\nthe best practices of using Django\u2019s cache backend.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 75,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "cache-rules-everything-around-me",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'cache', u'caching', u'djangocon', u'djangocon2011', u'memcache', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 76
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/103_confessions-of-joe-developer.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            7
        ],
        "title": "Confessions of Joe Developer",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Confessions of Joe Developer",
        "pyvideo_content": "Confessions of Joe Developer\n\nPresented by Daniel Greenfeld\n\nOver the course of 6 years of Python development at NASA, Revsys, and\nEldarion; Daniel Greenfeld has picked up a lot of easy tricks stolen from the\nbest and brightest in the Python community that make him look good in front of\nhis peers and clients. And now, at great risk to his career and reputation, he\nis going to show you how he does it.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 103,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "confessions-of-joe-developer",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'tips', u'tricks']",
        "pyvideo_summary": "",
        "youtube_thumbnail": "http://a.images.blip.tv/notfound-episode.png",
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 77
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/78_deployment-daemons-and-datacenters.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            10
        ],
        "title": "Deployment, Daemons and Datacenters",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Deployment, Daemons and Datacenters",
        "pyvideo_content": "Deployment, Daemons, and Datacenters\n\nPresented by Andrew Godwin\n\nA tour through the systems that power [ep.io](http://ep.io/), the Python\nhosting platform, from the array of daemons powering the system, to how\nredundancy is set up, and also covering general best practices for hosting\nDjango sites yourself.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 78,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "deployment-daemons-and-datacenters",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'daemons', u'datacenters', u'deployment', u'djangocon', u'djangocon2011', u'epio', u'ep.io', u'hosting']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 78
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/71_django-core-dev-panel.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Django Core Dev Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django Core Dev Panel",
        "pyvideo_content": "Django Core Dev Panel\n\nSome getting-to-know-you questions and answers for the Django core devs.\nAdditionally, covers how decisions are made, Python3 status, infrastructure\nstatus, so and so forth.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 71,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "django-core-dev-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'project']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 79
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/102_django-hosting-panel.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Django Hosting Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django Hosting Panel",
        "pyvideo_content": "Django Hosting Panel\n\nModerated by Sean O'Connor; Panelists: Gabriel Grant\n([dotCloud](http://www.dotcloud.com/)), Nate Aune\n([DjangoZoom](http://djangozoom.com/)), Andrew Godwin ([Epio](http://ep.io/)),\nJames Tauber ([Eldarion](http://eldarion.com/)), Brian Rosner\n([Eldarion](http://eldarion.com/)), Even Hazlett\n([apphosted](http://apphosted.com/))\n\nOver the last year there's a been a whole new crop of specialized hosting\nplatforms for Django applications. In this panel, we speak to a number of the\npeople behind these new platforms to discuss what benefits they offer, what\nchallenges they face, and what the Django project/community can do to\nencourage their growth.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 102,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "django-hosting-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'apphosted', u'djangocon', u'djangocon2011', u'djangozoom', u'eldarion', u'epio', u'hosting']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 80
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/93_django-package-thunderdome-is-your-package-worthy.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Django Package Thunderdome: Is Your Package Worthy?",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django Package Thunderdome: Is Your Package Worthy?",
        "pyvideo_content": "Django Package Thunderdome: Is Your Package Worthy\n\nAudrey Roy, Daniel Greenfeld\n\nWhat makes a package useful? What is it about certain packages that makes them\nmust-haves for any project? I\u2019ll go over topics like: purpose, structure,\ndocs, tests, availability on PyPI and Github/Bitbucket, activity, and more. I\nwill visit some of the most useful grids on djangopackages.com and highlight\nmy top package picks, showing examples of what makes these top packages so\ngreat.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 93,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "django-package-thunderdome-is-your-package-worthy",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'packaging']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 81
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/97_fireside-chat-with-a-bdfl.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Fireside Chat with a BDFL",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Fireside Chat with a BDFL",
        "pyvideo_content": "Fireside Chat with a BDFL\n\nJacob Kaplan-Moss\n\nQuestion and answer format covering the history of django, why it's popular,\ntheir inspirations, ...\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 97,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "fireside-chat-with-a-bdfl",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'history', u'project']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 82
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/105_from-designer-to-django-er-in-six-weeks-a-story-from-solo-founder.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            70
        ],
        "title": "From Designer to Django'er in Six Weeks: A Story from Solo Founder",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "From Designer to Django'er in Six Weeks: A Story from Solo Founder",
        "pyvideo_content": "From Designer to Django'er in Six Weeks: A Story from Solo Founder\n\nPresented by Tracy Osborn\n\nDjango gives you the tools to start a successful web app even if you're new to\ndevelopment. Learn how to build and launch a web startup while avoiding common\npitfalls and problems.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 105,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "from-designer-to-djangoer-in-six-weeks-a-story-from-solo-founde",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'startup']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 83
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/95_keynote-brad-fitzpatrick.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Keynote - Brad Fitzpatrick",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Keynote - Brad Fitzpatrick",
        "pyvideo_content": "Keynote\n\nBrad Fitzpatrick\n\nIn this talk, Brad will be discussing lessons learned from the various\nprojects he's started over the years and why it is often best to scratch your\nown itch.\n\n[VIDEO HAS ISSUES: Audio stutters periodically.]\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 95,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "keynote-brad-fitzpatrick",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 84
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/107_keynote-david-eaves.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Keynote - David Eaves",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Keynote - David Eaves",
        "pyvideo_content": "Keynote - David Eaves\n\nDavid talks about community management in open source communities.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 107,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "keynote-david-eaves",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'community', u'communitymanagement', u'djangocon', u'djangocon2011', u'eaves', u'management']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": "SzGi1DfbZMI"
    },
    "model": "lore.talk",
    "pk": 85
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/83_keynote-glyph-lefkowitz.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            90
        ],
        "title": "Keynote - Glyph Lefkowitz",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Keynote - Glyph Lefkowitz",
        "pyvideo_content": "Keynote\n\nPresented by Glyph Lefkowitz\n\nTalks about using Python for everything in a project and the difficulties of\nusing different non-Python-based things in your deployment.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 83,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "keynote-glyph-lefkowitz",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'keynote']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 86
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/70_lightning-talks-thursday-morning.mp4",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks - Thursday morning",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks - Thursday morning",
        "pyvideo_content": "Lightning Talks - Thursday morning\n\n  * 00:00 - Jason Boyer: Multi DB Routing \n  * 05:20 - Vicky Tuite: [PyStar](http://pystar.org/)\n  * 08:55 - Katie Cunningham: [Django Explorer](https://github.com/kcunning/android-django)\n  * 11:45 - Shawn Milo: You Should Contribute to Django \n  * 16:00 - Graham King: Psychology for your web app \n  * 21:30 - Tobias McNulty: [FabulAWS](http://bit.ly/fabulaws)\n  * 27:00 - Harris Lapiroff: [Pipetter](http://github.com/melinath/django-pipetter)\n  * 31:05 - Tim White: [wtfawd?](http://wtfawd.com/)\n  * 33:50 - Matt Lauber: Multiforms: A simple tool for managing multiple forms \n  * 38:55 - Kenneth Love: The dumb and lazy guide to class-based views \n  * 42:30 - Todd Davies: Let's talk about \"control by users\" \n  * 47:40 - Sebastian Serrano: backbone.js with django and tastypie \n  * 51:15 - ?: [Stackato](http://www.activestate.com/cloud)\n  * 56:00 - Steve Ivy: [Activity streams](https://github.com/justquick/django-activity-stream)\n  * 59:15 - Kenneth Love and Chris Jones: There's always money in the Banana(-py) Stand! ([Banana-Py](https://github.com/kennethlove/Banana-Py)) \n  * 1:00:46 - Brian Davis: Static analysis in Emacs ([emacs-psa](http://bit.ly/emacs-psa)) \n  * 1:03:55 - ?: Sitting on your butt and letting your ideas happen without you \n  * 1:06:35 - Mjumbe Poe: [django-model-blocks](https://github.com/mjumbewu/django-model-blocks)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 70,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "lightning-talks-thursday-morning",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'activitystreams', u'backbone.js', u'banana-py', u'cloud', u'contribute', u'djangocon', u'djangocon2011', u'djangoexplorer', u'django-model-blocks', u'eamcs', u'fabulaws', u'multidb', u'multiforms', u'pep8', u'pipetter', u'psychology', u'pyflakes', u'pylint', u'pystar', u'stackato', u'tastypie', u'views', u'wtfawd']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 87
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/96_lightning-talks-tuesday-morning.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks - Tuesday morning",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks - Tuesday morning",
        "pyvideo_content": "Lightning talks - Tuesday morning\n\n  * 00:00 - Joshua Ginsberg: Redis and Protocol Buffers \n  * 05:40 - Nate Aune: [DjangoZoom](http://djangozoom/com/)\n  * 10:45 - Justin Mayer: Tips for a prettier and more productive terminal \n  * 16:35 - ?: Philo \n  * 20:10 - 21:10 (musical interlude) \n  * 21:40 - Steve Holden: Making a Small Positive Difference \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 96,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "lightning-talks-tuesday-morning",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'djangozoom', u'philo', u'protobuf', u'redis']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 88
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/74_lightning-talks-wednesday-morning.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks - Wednesday morning",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lightning Talks - Wednesday morning",
        "pyvideo_content": "Lightning Talks - Wednesday morning\n\n  * 00:00 - Steve Ivy: [Pushcode](http://pushcode.wallrazer.com/)\n  * 05:00 - Jacob Kaplan-Moss: Brief history of Django model syntax \n  * 14:20 - Gabriel Grant: Why the big backpack? Well, I have t-shirts.... [DotCloud](http://dotcloud.com/)\n  * 16:20 - ?: Prezi [Prezi](http://prezi.com/)\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 74,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "lightning-talks-wednesday-morning",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'dotcloud', u'models', u'prezi', u'pushcode']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 89
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/76_making-interactive-maps-for-the-web.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            32
        ],
        "title": "Making interactive maps for the web",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Making interactive maps for the web",
        "pyvideo_content": "Making Interactive Maps for the Web\n\nPresented by Zain Memon\n\nWhen tasked with displaying geo-data, most developers decide to put some big\nred markers on an embeddable Google Map and call it a day. If you're\ninterested in creating maps that are more beautiful, more interactive, and\nmore usable, this talk is for you.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 76,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "making-interactive-maps-for-the-web",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'geodjango', u'gis', u'maps', u'polymaps', u'tilestash']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 90
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/89_making-the-django-orm-multilingual.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            51
        ],
        "title": "Making the Django ORM Multilingual",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Making the Django ORM Multilingual",
        "pyvideo_content": "Making the Django ORM Multilingual\n\nPresented by Jonas Obrist\n\nWhy does Django make it that hard to have translated database contents? And\nwhat solutions are there to make it easier? And how can Django make\nmultilingual database contents less of a pain?\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 89,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "making-the-django-orm-multilingual",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'localization', u'multilingual', u'orm', u'translations']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 91
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/104_monkeying-around-with-python-at-new-relic.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            91
        ],
        "title": "Monkeying Around with Python at New Relic",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Monkeying Around with Python at New Relic",
        "pyvideo_content": "Monkeying around with Python at New Relic\n\nPresented by Graham Dumpleton\n\nThis session will cover the challenges of creating a production application\nperformance monitoring system for Python. It includes an overview of the\narchitecture of the system, as well as how it hooks into Django and captures\ndetails about web transactions, database transactions, memcache requests,\nexceptions and much more.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 104,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "monkeying-around-with-python-at-new-relic",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'exceptions', u'memcache', u'monitoring', u'performance', u'requests', u'transactions']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 92
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/72_pinax-after-three-years-lessons-learnt-and-the-way-forward.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            17
        ],
        "title": "Pinax after Three Years: Lessons Learnt and the Way Forward",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Pinax after Three Years: Lessons Learnt and the Way Forward",
        "pyvideo_content": "Pinax after three years: Lessons learnt and the way forward\n\nPresented by James Tauber\n\nThe Pinax platform has had its ups and downs since it was launched in 2008.\nPeople either love it or just don't get it. About the only thing everyone\nagrees on is that it doesn't seem to be progressing as fast as it once did.\nThis talk will take a fresh look at the goals of Pinax, what we did well, what\nwe didn't do so well and what we're (slowly) doing to fix it.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 72,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "pinax-after-three-years-lessons-learnt-and-the-way-forward",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'pinax']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 93
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/100_real-time-django.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            65,
            43
        ],
        "title": "Real-Time Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Real-Time Django",
        "pyvideo_content": "Real-Time Django\n\nPresented by Ben Slavin, Adam Miskiewicz\n\nThe web is live. APIs give us access to continuously changing data. We discuss\nways to get real-time data into your app, how to handle data processing and\nwhat to do when you get thousands of updates per second.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 100,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "real-time-django",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'data', u'djangocon', u'djangocon2011', u'realtime']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 94
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/92_real-world-django-deployment-using-chef.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            28
        ],
        "title": "Real world Django deployment using Chef",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Real world Django deployment using Chef",
        "pyvideo_content": "Real world Django deployment using Chef\n\nPresented by Noah Kantrowitz\n\nChef, a popular configuration management tool, is gaining momentum in the\nDjango community. Learn how to deploy Django sites using Chef, be they one\nserver or a thousand.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 92,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "real-world-django-deployment-using-chef",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'chef', u'deployment']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 95
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/94_restful-apis-promises-and-lies.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            55
        ],
        "title": "RESTful APIs: Promises and Lies",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "RESTful APIs: Promises and Lies",
        "pyvideo_content": "RESTful APIs: Promises & Lies\n\nPresented by Tareque Hossain\n\nOver the last few years RESTful APIs have become an integral part of many\ndjango projects. But some of the fundamental questions still remain\nunanswered. How do you decouple resources from models, formatting from\ndefinitions, authorization from authentication? How should you define\nresources? How do you handle pagination? Deliver facets? Prevent abuse?\nImplement versioning? Let's have a look.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 94,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "restful-apis-promises-and-lies",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'api', u'djangocon', u'djangocon2011', u'rest']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 96
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/79_rtfm-write-the-friendly-manual.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            5
        ],
        "title": "RTFM -- wRite The Friendly Manual",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "RTFM -- wRite The Friendly Manual",
        "pyvideo_content": "RTFM - wRite The Friendly Manual\n\nPresented by James Bennett\n\nAn introduction to writing great documentation. Not just in the \"here's some\ntools and how to use them\" sense, but in the \"here's why you should care about\ndocumentation\" sense and the \"how to write things people will read\" sense.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 79,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "rtfm-write-the-friendly-manual",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'docs', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 97
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/85_safely-deploying-on-the-cutting-edge.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Safely deploying on the cutting edge",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Safely deploying on the cutting edge",
        "pyvideo_content": "Safely deploying on the cutting edge\n\nEric Holscher\n\nThis talk will go through the deployment system that we have built at Urban\nAirship. It will cover the process that allows us to automate our deployments,\nmaking it safe to deploy at any time. It's built on Fabric, Gunicorn,\nVirtualenv, Rsync, Supervisord, and Python. We end up with fully isolated\nenvironments for our services that are easy to manage.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 85,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "safely-deploying-on-the-cutting-edge",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'deploying', u'djangocon', u'djangocon2011', u'fabric', u'gunicorn', u'virtualenv', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 98
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/98_secrets-of-postgresql-performance.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            22
        ],
        "title": "Secrets of PostgreSQL Performance",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Secrets of PostgreSQL Performance",
        "pyvideo_content": "Secrets of PostgreSQL Performance\n\nPresented by Frank Wiles\n\nPostgreSQL is effectively the default RDBMS for Django. Learn the dark arts of\noptimizing this powerful database to be blazingly fast on your own hardware or\nin the cloud.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 98,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "secrets-of-postgresql-performance",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'optimize', u'optimizing', u'postgresql', u'rdbms']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 99
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/99_state-of-the-dsf-keynote.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "State of the DSF Keynote",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "State of the DSF Keynote",
        "pyvideo_content": "State of the DSF Keynote\n\nPresented by Russell Keith-Magee\n\nFor this keynote Russ will be providing some background on what the DSF is,\nwhat it has been up to recently, and what it plans to do over the next year.\nIf you're interested in contributing to the Django community, this will be a\ngreat way to find out what opportunities are out there and to find out how the\nDSF can help.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 99,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "state-of-the-dsf-keynote",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'dsf']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 100
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/88_stop-tilting-at-windmills-spotting-bottlenecks.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            24,
            57
        ],
        "title": "Stop Tilting at Windmills - Spotting Bottlenecks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Stop Tilting at Windmills - Spotting Bottlenecks",
        "pyvideo_content": "Stop Tilting at Windmills--Spotting Bottlenecks\n\nPresented by Yann Malet and Brandon Konkle\n\nLearn the questions to ask and the tools to use to spot performance problems\nin your application. We won't tell you how to scale your site, but we will\nshow you how to locate the bottlenecks as they pop up.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 88,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "stop-tilting-at-windmills-spotting-bottlenecks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'bottlenecks', u'djangocon', u'djangocon2011']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 101
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/69_taming-dependencies-with-pip.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            13
        ],
        "title": "Taming dependencies with pip",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Taming dependencies with pip",
        "pyvideo_content": "Taming dependencies with pip\n\nPresented by Carl Meyer\n\nDependency management sucks. Pip provides some options for making it suck a\nbit less, but not all of them are immediately obvious. This talk will cover a\nnumber of strategies for making your deployments faster and more reliable, and\ndemonstrate how to implement them in practice.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 69,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "taming-dependencies-with-pip",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'dependencies', u'djangocon', u'djangocon2011', u'pip']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 102
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/81_teaching-django-to-comrades.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            49
        ],
        "title": "Teaching Django to Comrades",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Teaching Django to Comrades",
        "pyvideo_content": "Teaching Django to Comrades\n\nPresented by Issac Kelly\n\nInevitably you're going to run into somebody who wants to learn Django, or\nmaybe both Python and Django. This talk will help you make it less painful for\nthem.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 81,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "teaching-django-to-comrades",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'basic', u'djangocon', u'djangocon2011', u'learning']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 103
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/73_testing-the-developer-strikes-back.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [],
        "title": "Testing: The Developer Strikes Back",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Testing: The Developer Strikes Back",
        "pyvideo_content": "Testing: The Developer Strikes Back\n\nSandy Strong\n\n\u201cCode not tested is broken by design\u201d - Jacob Kaplan-Moss\n\nEvery programming project has unique testing needs. It\u2019s not always easy to\nunderstand what those needs are, or how to write tests that satisfy them. One\nof our goals as developers is to write tests that minimize failures in\nproduction that can cost our companies time, money, resources, and in many\ncases, hours of sleep!\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 73,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "testing-the-developer-strikes-back",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'coverage.py', u'djangocon', u'djangocon2011', u'jenkins', u'testing', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 104
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/106_testing-with-lettuce-and-splinter.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            83
        ],
        "title": "Testing with Lettuce and Splinter",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Testing with Lettuce and Splinter",
        "pyvideo_content": "Testing with Lettuce and Splinter\n\nPresented by Adam Nelson\n\nLettuce, adapted from Ruby's Cucumber, is a behavior driven development (BDD)\ntesting suite that sits on top of Splinter - a web driver for simulating real-\nworld usage of your site. Learn the ins and outs of BDD using Lettuce and\nSplinter for rapid deployment.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 106,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "testing-with-lettuce-and-splinter",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'lettuce', u'splinter', u'testing']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 105
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/101_the-story-and-tech-of-read-the-docs.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            19
        ],
        "title": "The story and tech of Read the Docs",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "The story and tech of Read the Docs",
        "pyvideo_content": "The story and tech of Read the Docs\n\nPresented by Eric Holscher\n\nHosting open source documentation was a mess. The best-of-class solution for\nthe Python world as uploading a tarball of html to packages.python.org or\ndoing similar to upload to github pages. We set out to solve this problem\nusing the current best of class tools that Django has to offer.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 101,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "the-story-and-tech-of-read-the-docs",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'casestudy', u'djangocon', u'djangocon2011', u'documentation', u'readthedocs', u'rtd', u'rtfd']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 106
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/87_why-the-django-documentation-sucks.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            31
        ],
        "title": "Why the Django Documentation Sucks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Why the Django Documentation Sucks",
        "pyvideo_content": "Why the Django Documentation Sucks\n\nPresented by Steve Holden\n\nDocumentation is normally held to be one of Django's strong points. Steve\nattempts to point out that even the best can stand improvement.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 87,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "why-the-django-documentation-sucks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'docs']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 107
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/77_y-all-wanna-scrape-with-us-content-ain-t-a-thing-web-scraping-with-our-favorite-python-libraries.m4v",
        "youtube_title": null,
        "event": 11,
        "pyvideo_source_url": "",
        "view_count": null,
        "speakers": [
            72
        ],
        "title": "Y'all Wanna Scrape with Us? Content Ain't a Thing : Web Scraping With Our Favorite Python Libraries",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Y'all Wanna Scrape with Us? Content Ain't a Thing : Web Scraping With Our Favorite Python Libraries",
        "pyvideo_content": "Y'all Wanna Scrape with Us? Content Ain't a Thing: Web Scraping With Our\nFavorite Python Libraries\n\nPresented by Katharine Jarmul\n\nLove or hate them, the top python scraping libraries have some hidden gems and\ntricks that you can use to enhance, update and diversify your Django models.\nThis talk will teach you more advanced techniques to aggregate content from\nRSS feeds, Twitter, Tumblr and normal old web sites for your Django projects.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 77,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "yall-wanna-scrape-with-us-content-aint-a-thing-web-scraping-wit",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'djangocon', u'djangocon2011', u'lxml', u'scraping', u'web']",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 108
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=O2MGR0N68UI",
        "view_count": null,
        "speakers": [
            2
        ],
        "title": "BDFL Keynote - Adrian Holovaty",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "BDFL Keynote - Adrian Holovaty",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1387,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "bdfl-keynote-adrian-holovaty",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 - BDFL Keynote - Adrian Holovaty\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/O2MGR0N68UI/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "O2MGR0N68UI"
    },
    "model": "lore.talk",
    "pk": 109
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=134WqTquENk",
        "view_count": null,
        "speakers": [
            92
        ],
        "title": "DjangoCon 2012 Keynote - Eric Sterling",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon 2012 Keynote - Eric Sterling",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1404,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "djangocon-2012-keynote-eric-sterling",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 - Keynote - Eric Sterling\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/134WqTquENk/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "134WqTquENk"
    },
    "model": "lore.talk",
    "pk": 110
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "",
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=34_oKFx43O4",
        "view_count": null,
        "speakers": [
            93
        ],
        "title": "DjangoCon 2012 Keynote - Geoff Schmidt",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon 2012 Keynote - Geoff Schmidt",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1389,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "djangocon-2012-keynote-geoff-schmidt",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 - Keynote - Geoff Schmidt\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/34_oKFx43O4/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "34_oKFx43O4"
    },
    "model": "lore.talk",
    "pk": 111
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=KSednnZNJ04",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "DjangoCon 2012 Keynote - Russell Keith-Magee",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon 2012 Keynote - Russell Keith-Magee",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1400,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "djangocon-2012-keynote-russell-keith-magee",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 - Keynote - Russell Keith-Magee\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/KSednnZNJ04/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "KSednnZNJ04"
    },
    "model": "lore.talk",
    "pk": 112
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=K0jJhYtzLbs",
        "view_count": null,
        "speakers": [
            60
        ],
        "title": "DjangoCon 2012 Keynote - Selena Deckelmann",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon 2012 Keynote - Selena Deckelmann",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1416,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "djangocon-2012-keynote-selena-deckelmann",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 Keynote - Selena Deckelmann\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/K0jJhYtzLbs/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "K0jJhYtzLbs"
    },
    "model": "lore.talk",
    "pk": 113
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=tXyenP18iUg",
        "view_count": null,
        "speakers": [],
        "title": "DjangoCon 2012 Lightning Talks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon 2012 Lightning Talks",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1415,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-10-06T00:00:00Z",
        "slug": "djangocon-2012-lightning-talks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "DjangoCon 2012 Lightning Talks\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/tXyenP18iUg/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "tXyenP18iUg"
    },
    "model": "lore.talk",
    "pk": 114
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=eN7h6ZbzMy0",
        "view_count": null,
        "speakers": [
            68
        ],
        "title": "About Django from the Pyramid Guy",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "About Django from the Pyramid Guy",
        "pyvideo_content": "# About Django from the Pyramid Guy\n\n## Who Am I\n\n  * BBS nerd in the 80s.\n\n  * Bad Perl hacker until Python. Came to Python via Zope in 1999. Worked at Digital Creations (aka Zope Corporation) until 2003.\n\n  * Primary author of: Pyramid web framework, Supervisor UNIX process control system, Deform form system, Repoze collection of middleware, and other unmentionables. Contributor to Zope, WebOb, and lots of other OSS projects.\n\n  * Quoting Glyph: \"I've been doing IRC support for 10 years, so I'm pretty much dead inside.\"\n\n## What is a Web Framework\n\n  * A web framework receives a request, calls user code in order to return a response. Everything else is a bonus.\n\n  * Arguments about how a web framework implements \"MVC\" are usually distractions. Django gets this right.\n\n## Django Docs Do It Right\n\n  * Django docs broke the Python documentation curve.\n\n  * Great resources for multiple audiences.\n\n## Django Views Do It Right\n\n  * No magical globals (request or response).\n\n  * Django view lookup and execution is very fast.\n\n## Django Forms Do It Right\n\n  * Decoupling of models from forms.\n\n  * Optional recoupling via modelforms.\n\n## Django Convenience vs. Explicitness\n\n  * No thread locals.\n\n## Django Extensibility Does It Right\n\n  * Replaceable backends for authentication.\n\n  * Replaceable backends for storage.\n\n  * Encourages an environment of plugins at different levels.\n\n## Django Defaults Do It Right\n\n  * Django provides people with unambiguous ways to solve 80% of their web development problems.\n\n  * Doesn't prevent specialization or use of external libraries.\n\n## Django Reality Does It Right\n\n  * Can't argue with success.\n\n  * Scores of very successful sites built using Django.\n\n## What is Pyramid\n\n  * Pyramid handles view lookup and execution and provides related convenience APIs. It also allows extensive configuration of these things.\n\n  * Pyramid is a corner of a corner of Django, magnified.\n\n  * James Bennett's PyCon 2012 \"Django In Depth\" tutorial: ~20 minutes out of 3 hours devoted to things that Pyramid actually does: low-level template API, view lookup and execution, HTTP responses, middleware.\n\n  * Pyramid is independent of any particular peristence system. It has no built-in form generation system. It does not prefer any particular templating system. It does not ship with an admininstrative application.\n\n  * Something like Pyramid could be used to build something like Django.\n\n## Pylons Project\n\n  * Project lead consolidation decision.\n\n  * Attempt to get Pylons, TurboGears and `repoze.bfg` communities rowing in the same direction.\n\n  * Pylons 1.x web framework shifted into \u201clegacy\u201d status. Maintained indefinitely.\n\n  * New development: Pyramid and related.\n\n  * Turbogears: wildcard.\n\n## Is Pyramid a Microframework?\n\n  * Pyramid is sort of microframework-like. You can write a Pyramid application in a single file.\n\n  * Self-identifying microframeworks tend to suggest application development patterns to its users which promote convenience over explicitness. Pyramid (for better or worse) does not do this, because it needs to be useful in larger systems where these patterns can lead to extensibility problems.\n\n  * In reality, the term \"microframework\" is a marketing term, not a technological term, so whether the answer is yes or no doesn't really matter too much unless you have a stake in the project.\n\n## Small Pyramid Program\n\n    \n    from wsgiref.simple_server import make_server\n    from pyramid.config import Configurator\n    from pyramid.response import Response\n    \n    def hello_world(request):\n       return Response('Hello %(name)s!' % request.matchdict)\n    \n    if __name__ == '__main__':\n       config = Configurator()\n       config.add_route('hello', '/hello/{name}')\n       config.add_view(hello_world, route_name='hello')\n       app = config.make_wsgi_app()\n       server = make_server('0.0.0.0', 8080, app)\n       server.serve_forever()\n    \n\n## Pyramid and Python 3\n\n  * Pyramid's current release (1.3) supports Python 3.2+ (as well as Python 2.6 and 2.7).\n\n  * Most existing add-ons already ported. When feasible, we port add-on dependencies (`beaker`, `WebOb`, `zope.*` packages).\n\n  * We have a committment to Python 3. It involves lots of whining and bitching.\n\n## I'm No Genius\n\n  * Pyramid does things wrong. Many parts of Pyramid make me cringe. https://github.com/Pylons/pyramid/wiki/Mistakes\n\n  * The grass is always greener.\n\n## Pyramid Docs\n\n  * Culture of documentation (if it's not documented, it's broken).\n\n  * Pyramid itself has ~800 printed pages of narrative and API documentation, plus a few hundred pages of \"cookbook\" material.\n\n  * Comprehensive but pretty dry.\n\n## Docs Pain\n\n  * Many pain points are related to plain old bad docs: our fault. Docs are at least 10X harder to write well than the associated code and take much longer. Most coders hate writing docs. I write lots of documentation but it's often not very good.\n\n  * But other pain points people experience when trying to learn Pyramid from its docs is due to poorly documented dependencies (setuptools). We need to redocument subsystems \"in context\", for better or worse. (HELP!)\n\n  * And some pain points are due to an audience mismatch; narrative documentation assumes people know \"Python\" _and_ \"the web\". They often need remedial help in one or both, which the docs don't provide.\n\n  * \"Chipin\" project raised ~$5K for documentation overhaul.\n\n## Pyramid Friends\n\n  * Colander/Deform: form handling.\n\n  * SQLAlchemy: SQL database connectivity and querying.\n\n  * Pyramid-specific add-ons like `pyramid_mailer`, `pyramid_zodbconn`, `pyramid_socketio`, `pyramid_mongodb`, and so forth.\n\n  * The typical Pyramid application makes use of some combination of add-ons.\n\n## Scaffolding\n\n  * A scaffold renders a project. A project is installable like any other setuptools distribution (it has a `setup.py`, etc).\n\n  * The project depends on some combination of Pyramid, Pyramid plugins, and other third-party libraries and frameworks.\n\n  * `zodb`, `alchemy` and `starter` scaffolds provided by Pyramid itself. Others are contributed to PyPI by third parties.\n\n## Bindings Packages\n\nA more generic package is specialized for convenient use under Pyramid via use\nof a bindings package.\n\n  * `deform` + `pyramid_deform`.\n\n  * `repoze.who` + `pyramid_who`.\n\n  * 2X documentation burden: document once in general package docs, document again in bindings docs. That's no fun.\n\n  * But this will happen anyway if your code is popular (Celery).\n\n## Higher Level Frameworks\n\n  * `ptah`\n\n  * `kotti`\n\n  * `poolyx`\n\n  * `substanced`\n\n## Packaging Is Like a Blast Shield\n\n  * A blast shield helps keep shrapnel out.\n\n  * It can also help keep shrapnel _in_.\n\n  * Shrapnel tends to penetrate anything not within a blast shield.\n\n  * Every piece of software eventually blows up.\n\n  * The more blast shields you have, the more the damage is contained.\n\n  * But blast shields obscure the landscape. More work required for users.\n\n  * More packages add more documentation and conceptual overhead, and more unwanted choice.\n\n## Django Avoids Setuptools\n\n  * Setup.py develop of django doesn't work.\n\n  * Avoidance of setuptools also prevents use of console scripts (e.g. django-admin).\n\n  * Django recreates some of the patterns that setuptools provides (i.e. test discovery hooks).\n\n  * Developers whom are ignorant of distribution issues are very confused when inevitably faced with them.\n\n## Django Avoids Setuptools (2)\n\n  * Django's defacto avoidance of setuptools is understandable. But it's not helping to improve Python packaging. Python packaging and distribution needs you very badly.\n\n  * Fewer documentation issues to cope with, but contributing to docs for setuptools would float all boats.\n\n## Subclassing Is Convenient\n\n  * You don't have to explain a protocol (the protocol is Python).\n\n  * But offering extensibility via subclassing is often a poorer choice than offering extensibility via composition and very explicit interfaces.\n\n  * Why? People begin depending upon the implementation details of the classes you tell them to subclass. Unless you're extremely clear about what the API of the superclass is, and the social contract to use nothing else but the documented API exists, you'll be pressured into making retroactive APIs. Impossible to recover from without breaking b/w compat.\n\n  * Not uncommon to see a subclass of a subclass of a subclass of a subclass; figuting out how the thing works can be an exercise in pain and multiple editor windows.\n\n## Globals are Convenient\n\n  * You don't have to explain a protocol for obtaining a value (the protocol is `import`).\n\n  * But the development of circular imports is inevitable.\n\n  * Global registries make it impossible to embed more than one application into the same Python process.\n\n## Module-Scope Work Is Convenient\n\nFrom Django tutorial, at module scope:\n\n    \n    from django.contrib import admin\n    admin.autodiscover()\n    \n\n## Module-Scope Work Is Convenient (2)\n\n  * These things can be done at module scope without concern:\n\n  * An import of another module or global.\n\n  * Assignment of a variable name in the module to some constant value.\n\n  * The addition of a function via a def statement.\n\n  * The addition of a class via a class statement.\n\n  * Control flow which may handles conditionals for platform-specific handling or failure handling of the above.\n\n  * Everything else is at least suspect. Test runners and other code scanners can import with abandon, and side effects are often undesirable.\n\n## Pluggable Apps / Reusable Apps\n\n  * Pluggable apps probably aren't really that pluggable, reusable apps probably aren't as reusable as you might like.\n\n  * IMO, even a framework as high-level as Django can't really offer such a feature without stretching the truth just a little bit.\n\n  * The only thing that can truly offer pluggable apps: another app. No general-purpose framework can do a great job here. (Examples: Wordpress, Jenkins, Plone).\n\n## Rendering Is Meta-View\n\n  * `render_to_response` using template in view is no fun to test.\n\n  * Returning a dict from a view callable is more fun to test.\n\n## Unit Tests\n\n  * Exclusive use of Django test client for tests will cause test suite to run more slowly than necessary.\n\n  * A slow enough test suite won't be run before commit.\n\n  * Testers who don't understand any type of testing other than \"system\" or \"integration\" testing tend to bring poor testing practices to unrelated systems.\n\n  * Using setuptools provides nice hooks for test discovery and execution.\n\n## Static Files\n\n  * Python WSGI servers are getting better at serving static files. E.g. Gunicorn supports `sendfile` on UNIX.\n\n  * Might be time to reconsider offloading media to a dedicated non-Python server and make use of what's available in WSGI-land.\n\n## Community\n\n  * Pyramid community is maybe 10% the size of the Django community.\n\n  * It's growing.\n\n  * Your success is our success. I'd be very pleased to have Pyramid be considered the #2 Python web framework (at least for \"Python people\"). Forever.\n\n## Collaboration (Low-Level)\n\n  * Create adapter for WebOb or Werkzeug that implements the Django request API?\n\n  * Create an adapter for SQLAlchemy that implements the Django ORM API?\n\n  * These are likely losers. They are \"30 year plans\". Things change so fast. Who will pay immediately? Who will benefit immediately?\n\n  * Might be better to try to use common non-domain-specific dependencies (e.g. setuptools, virtualenv, WSGI middleware, etc). It would be a great win to share documentation burden, even if we had to \"fork\" it for our own contextual requirements.\n\n## Collaboration (High-Level)\n\n  * Django is limited by backwards compatibility concerns. It's impractical to make large architectural changes now. Your users would kill you.\n\n  * But I could imagine somebody from the Django community creating a \"Django-NG\" or a Django-like system from whole cloth. Or break Django apart into something that isn't quite bw compatible.\n\n  * It might make sense to consider Pyramid or another smaller framework as a base for such an effort. If you used Pyramid, you'd get URL routing, internationalization, template bindings, configuration extensibility, flexible view lookup and execution, an event system, security, documentation, Python 3 compatibility, and other things. `ptah` is such a system right now.\n\n  * Pyramid community is very enthusiastic, friendly, helpful, and experienced.\n\n## Promoting Python\n\n  * I challenge you to not be complacent.\n\n  * I challenge you to investigate how other frameworks work.\n\n  * I challenge you to embrace existing Python packaging and distribution tools.\n\n  * I challenge you to port quickly to Python 3. Commit to supporting it in your add-ons and helping folks who have existing add-ons port.\n\n  * I challenge you to speak out when folks bash competitors. Haters are everywhere, and when someone bashes Pyramid, Flask, Bottle, or Zope, and nobody defends against it, the hate will eventually come back to harm you.\n\n## Unknowns\n\n  * Django Class-Based Views Might Not Do It Right. `as_view`. Hmm. All views in Pyramid are potentially generic. They have a context passed to them. Class-based views in Pyramid are not things handed down from \"good devs\" to reuse, they're just normal things.\n\n  * How does Django allow for configuration extensibility? Conflict detection?\n\n  * Event system\n\n  * Alternate templating languages\n\n  * Exception views\n\n  * View predicates\n\n  * Transaction management\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1407,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "about-django-from-the-pyramid-guy",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "An opinionated recounting of the features Django shares with the Pyramid web\nframework, and how the two frameworks differ, as well as a prescription for\ncollaboration between the Django and Pyramid communities.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/eN7h6ZbzMy0/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "eN7h6ZbzMy0"
    },
    "model": "lore.talk",
    "pk": 115
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=xbWBIudWRxQ",
        "view_count": null,
        "speakers": [
            52
        ],
        "title": "Accelerating and Enhancing Django with Redis",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Accelerating and Enhancing Django with Redis",
        "pyvideo_content": "Getting your Django app to a v1.0 release means focusing on function and user\nexperience before prematurely focusing on optimization. But once it's off the\nground, the Redis key-object store provides a versatile and functional way to\ntake your app to the next level of performance and function with minimal\nengineering.\n\n[Redis](http://redis.io) is an in-memory key-object database that can perform\nstandard operations on simple values, lists, sets, hash maps, and scored sets\nwith incredible efficiency. While it cannot and should not replace SQL for\nschema-defined, persistent data storage, it can provide dramatically faster\noperational efficiency for volatile, temporary, or rapidly changing data with\nminimal coding required.\n\nThis talk begins by introducing Redis, its basic featureset, and the data\ntypes and operations it supports. We'll cover some high-level guidelines and\nstrategies for identifying where Redis may be an appropriate performance-\nenhancing solution. We then cover the out-of-the-box ways that Redis can\nimprove a Django application as a cache, session store, Celery broker, and\nmore. We'll then proceed to more advanced usage possibilities, implementing a\nreal-time websocket based messaging solution, scripting within Redis using its\nembedded Lua interpreter, and connecting Redis to PostgreSQL using Foreign\nData Wrappers to efficiently blend SQL tables with Redis data.\n\nBy the end of the presentation, you should be able to use all of the data-\nstructures offered by Redis, to identify opportunities within you codebase\nthat Redis may offer simple but dramatic efficiency improvements, and to\nenvision how advanced Redis usage may bring new and cutting-edge functionality\nto your project.\n\nRedis was developed by [Salvatore Sanfilippo](http://twitter.com/antirez) and\n[Pieter Noordhuis](http://twitter.com/pnoordhuis), who are both supported by\nVMWare to develop the database full-time. Redis has excellent [Python\nbindings](https://github.com/andymccurdy/redis-py/) developed by Andy McCurdy.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1410,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "accelerating-and-enhancing-django-with-redis",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'redis']",
        "pyvideo_summary": "This tutorial introduces Redis, an in-memory key-object NoSQL datastore. We\ndiscuss out-of-the-box ways Redis can help improve the performance of your\nDjango deployments, ways that using Redis instead of SQL for some data\nmanagement can accelerate your apps, and more advanced and unconventional uses\nfor Redis to solve real-time and big-data problems.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/xbWBIudWRxQ/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "xbWBIudWRxQ"
    },
    "model": "lore.talk",
    "pk": 116
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=DsYVx-mh3NE",
        "view_count": null,
        "speakers": [
            11
        ],
        "title": "Boosting teamwork with Vagrant",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Boosting teamwork with Vagrant",
        "pyvideo_content": "In this talk I will present Vagrant, a free open-source tool facilitating the\nmanipulation of virtualized environments, and how it may benefit the\ndevelopment of Django applications. This talk is aimed at Django developers of\nall levels who are interested in getting an overview of the great\npossibilities Vagrant offers to support teamwork and quality assurance.\n\nOne major benefit of using Vagrant is with on-boarding. Previously, when new\ndevelopers joined a project, it could take hours or days for them to correctly\nset up their development environment and install all the projects'\ndependencies (the correct version of Python, the virtualenv, the database\nserver, the caching engine, etc.). With Vagrant, combined with provisioning\ntools like Chef or Puppet, it is now possible to easily create a virtual\nmachine with all the right dependencies properly pre-installed and pre-\nconfigured to allow anyone to be fully operational and ready to contribute to\nthe project in a matter of minutes.\n\nAnother major benefit of Vagrant is that it gives the opportunity to create a\nworking environment for all developers that closely matches that of the\nproduction server. This in turn allows to anticipate potential issues when new\ncode and resources eventually get deployed live.\n\nIn this talk, I will present some key functionalities and workflows around the\nuse of Vagrant: - installing Vagrant and Virtualbox. - creating a new virtual\nmachine. - provisioning a virtual machine with basic requirements. - sharing\nvirtual machine specifications with team members.\n\nThis talk will include a brief introduction to Chef and Puppet. It will also\ninclude multiple practical tricks like accessing the VM's database server from\nthe host's machine, setting up useful shell aliases or automatically\nactivating the virtualenv when launching the VM.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1408,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "boosting-teamwork-with-vagrant",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'vagrant']",
        "pyvideo_summary": "In this talk I will present Vagrant, a free open-source tool facilitating the\nmanipulation of virtualized environments, and how it may benefit the\ndevelopment of Django applications. This talk is aimed at Django developers of\nall levels who are interested in getting an overview of the great\npossibilities Vagrant offers to support teamwork and quality assurance.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/DsYVx-mh3NE/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "DsYVx-mh3NE"
    },
    "model": "lore.talk",
    "pk": 117
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=9ZIPNWqjIEI",
        "view_count": null,
        "speakers": [
            33
        ],
        "title": "Building PCI compliant Django applications",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Building PCI compliant Django applications",
        "pyvideo_content": "PCI DSS is a set of twelve different security standards that are required for\nany organization that handles credit or debit card transactions. These\nstandards are created by the Payment Card Industry Security Standards Council\nand they require all organizations to validate that they are compliant every\nyear.\n\nUnderstanding these rules and how they effect you is sometimes a daunting\ntask. The goals of this talk will be the following:\n\n  * Explain PCI DSS, and quickly go over the rules that will effect your application.\n  * Show how to securely handle credit card transactions in your Django application.\n  * Storing credit card information isn't ideal, but if you need to, I'll explain the different ways to securely store the data.\n  * Go over the different ways to limit your PCI DSS liability (BrianTree, Akamai Edge Tokenization, Auth.net CIM)\n  * Explore the different tools you will need in order validate your PCI compliance (Web application scans, IDS, Network Scan, firewalls)\n  * How to be PCI Complaint in the cloud\n\nI'll close out the talk with some of the details on how I haver personally\nsatisfied PCI DSS Requirements on my projects in the past. I'll cover some of\nthe tools and services that I used, and why I decided to use them.\n\nAt the conclusion of the talk you should have a better understanding of PCI\nDSS, and what you need to do, in order for your Django application to be\ncertified as compliant.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1411,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "building-pci-compliant-django-applications",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'pci-complicance']",
        "pyvideo_summary": "If you currently accept credit cards with your Django application today, or\nyou plan on accepting them in the future, then you will need to worry about\nPCI DSS. Learn what you need to do to make sure that your application is PCI\nDSS compliant, and if it is not, what you need to do to bring it into\ncompliance.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/9ZIPNWqjIEI/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "9ZIPNWqjIEI"
    },
    "model": "lore.talk",
    "pk": 118
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=NZnnB7l3ZHM",
        "view_count": null,
        "speakers": [
            94
        ],
        "title": "Django's Nasal Passage",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django's Nasal Passage",
        "pyvideo_content": "  * Why nose?\n    * Pain points with standard Django testing\n    * Extensibility without writing custom, uncombineable testrunner subclasses\n    * Rich ecosystem of helpful plugins\n  * django-nose\n    * Testing just your apps, not all the random installed stuff\n    * Test-selection tricks: running just failed tests, running a module, etc.\n    * Killing the boilerplate:\n      * No more imports into **init**\n      * No more class name collisions and accidental shadowing\n      * With all this freedom, how best should you organize your tests?\n    * Going 4 times faster with fixture bundling\n      * Troubleshooting\n      * Fixtures are evil\n      * Where do I put the factories?\n    * Speeding startup with test DB reuse\n    * Writing faster TransactionTestCases with hygienic base classes\n      * Background on Django's handling of TransactionTestCases\n      * How to improve matters\n    * Test-only models: what's the best practice?\n  * nose-progressive\n    * Dots considered harmful. When will my tests be done?\n    * Patience is for the dead. Show me my tracebacks as they happen!\n    * My terminal is only this big. Don't waste my space.\n    * Hiding pointless stack frames\n    * Editor round-tripping for quick debugging\n  * Splitting into sub-suites\n    * An introduction to the attr plugin\n    * Have some run only on CI machines, some constantly, others before checkin\n    * Choosing tests with regexes\n  * Other fun plugins\n    * f7u12, for when your tests get angry\n    * Coverage\n    * xunit, for your continual integration pleasure\n    * Profiling\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1406,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "djangos-nasal-passage",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'nose', u'testing']",
        "pyvideo_summary": "Django's testrunner gets you started quickly, but you soon hit your head on\nits limitations as your project grows. By trading it for nose, a testing\nframework popular in the wider Python community, we can reduce boilerplate,\nboost performance, and improve testing UI, with only a few lines of setting\nchanges. Re-use your test DBs, integrate with Jenkins, split your suite into\npieces, and more.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/NZnnB7l3ZHM/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "NZnnB7l3ZHM"
    },
    "model": "lore.talk",
    "pk": 119
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=grGIl9gP-iY",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "Get off the bench: Making the leap from user to contributor",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Get off the bench: Making the leap from user to contributor",
        "pyvideo_content": "Django needs you! No -- seriously -- Django is a volunteer project, and the\nability of Django to continue to improve is entirely controlled by the time\nand dedication people like you are willing to put into making Django better.\n\nHowever, it's not just a matter of sitting down and writing code. If you don't\nhave a plan for how you're going to engage with the rest of the community,\nit's very easy to put in a lot of effort, and then have that effort go\nentirely to waste. This talk will give you some tips on how to engage the\ncommunity so that you can see your effort turn into progress, and not just be\nlost in a mailing list.\n\nGetting involved doesn't just mean contributing code, either. There are lots\nof other ways that you can be a valuable member of the community, and this\ntalk will give you several suggestions for how your talents could be used to\nimprove the entire Django ecosystem.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1409,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "get-off-the-bench-making-the-leap-from-user-to-contributor",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "Django -- like all Open Source projects -- is only as good as the community of\npeople that contribute to it. We have a huge user community, but the vast\nmajority of users never make the leap and become contributors. This talk will\nwalk you through the process of making the transition from Django user, to\nDjango Project contributor.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/grGIl9gP-iY/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "grGIl9gP-iY"
    },
    "model": "lore.talk",
    "pk": 120
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=nGqQC4_UV-A",
        "view_count": null,
        "speakers": [
            21
        ],
        "title": "Is Django for Designers?",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Is Django for Designers?",
        "pyvideo_content": "From the beginning, Django has been built to be designer friendly. This talk\nis meant for those who are looking to learn more about how Django empowers\ndesigners to create websites intelligently. Here is a brief outline of what\nwill be covered:\n\n  * Overview of Django's designer roots\n    * Personal background as a designer learning Django\n    * How did Django start out with designers in mind?\n    * Design methodologies\n  * How is Django designer friendly?\n\n    * Documentation overview\n    * Code examples\n      * Template inheritance and why it's awesome\n      * Overview of the built-in template tags and filters\n      * What's new in Django 1.4?\n  * Django needs designers\n\n    * How to contribute\n    * Why designers are an important part of the community\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1414,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "is-django-for-designers",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "How designer friendly is Django? This talk reviews the history of Django and\nhow it came to be one of the most designer friendly frameworks around. We will\nreview the Django design methodology and how simple it is for designers to get\nstarted creating and publishing their own projects.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/nGqQC4_UV-A/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "nGqQC4_UV-A"
    },
    "model": "lore.talk",
    "pk": 121
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=gwP7zLDDdPA",
        "view_count": null,
        "speakers": [
            10
        ],
        "title": "Models and Migrations and Schemas - oh my!",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Models and Migrations and Schemas - oh my!",
        "pyvideo_content": "Django has a long and varied history of dealing with changing schema\nrequirements - from the early projects like django-evolution and the two\naborted attempts to provide migrations in Django itself, through to projects\nlike South and now looking ahead to a more integrated solution with Django\nitself once more.\n\nThis talk will cover some of that history - helpful to get some kind of\ncontext when it comes to current developments - as well as exploring some of\nthe common problems a migration system (and its users) encounter, and how\nthose lessons and ideas are being used to help improve Django itself to better\nsupport schema migrations.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1412,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "models-and-migrations-and-schemas-oh-my",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'models']",
        "pyvideo_summary": "A look at the past, current and future of schemas, migrations and Django, and\nwhat it means for both website developers and ops staff.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/gwP7zLDDdPA/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "gwP7zLDDdPA"
    },
    "model": "lore.talk",
    "pk": 122
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=-hma3mlcrD8",
        "view_count": null,
        "speakers": [
            66,
            50
        ],
        "title": "Under the Microscope: Evaluating Existing Django Code When Onboarding a New Client",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Under the Microscope: Evaluating Existing Django Code When Onboarding a New Client",
        "pyvideo_content": "Taking over someone else\u2019s code is an exercise fraught with peril. However,\nwith the growing popularity of Django, more and more organizations are seeking\ncompanies and individuals to take over their Django website and support their\nexisting Django codebase. This talk will describe the standardized process\nImaginary Landscape has developed to evaluate existing code as part of their\nnew client onboarding process.\n\nCovered topics:\n\n  * Introduction/Overview\n\n  * Top reasons why clients are looking to change vendor\n\n  * Initial assessment\n\n>     * What questions to ask before looking at the code.\n\n  * Where to start when looking at code? \n\n>     * Traversing the code tree to get a feel for how the code is structured\n\n>     * Trying to determine how the previous developer thinks\n\n  * Detailed code review including checklist\n\n>     * Things to look for when evaluating code: Version control, \"Standard\"\nsite layout, Settings file, hardcoding, Virtualenv, south, etc.\n\n  * Examples (names have been changed to protect the imperfect)\n\n>     * The good: the kinds of coding and configuration techniques that seem\nto be consistent among well-thought-out projects.\n\n>     * The bad: examples of code and configuration that make onboarding and\nmaintenance difficult.\n\n  * Final thoughts\n\n>     * What you can do as a developer taking over a project.\n\n>     * What you can do as a developer hoping to make great code that others\nmay someday see.\n\n>     * Exercise your right to say no, it\u2019s your reputation on the line\n\n  * Q&A\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1413,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "under-the-microscope-evaluating-existing-django-code-when-onboa",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "As a Web development firm that specializes in Django, we receive many\ninquiries from organizations looking for assistance with their existing Django\nwebsites. This session will describe our process for evaluating existing\ncodebases and deployment structures. The goal is to provide a framework for\nevaluating other people's code and understand the scrutiny your code may\nsomeday endure.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/-hma3mlcrD8/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "-hma3mlcrD8"
    },
    "model": "lore.talk",
    "pk": 123
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=dXDLWGY0Tro",
        "view_count": null,
        "speakers": [
            82,
            78
        ],
        "title": "Where Django Caching Busts at the Seams",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Where Django Caching Busts at the Seams",
        "pyvideo_content": "Most mid-sized Django websites thrive by relying on memcached. Though what\nhappens when basic memcached is not enough? And how can one identify when the\ncaching architecture is becoming a bottleneck? We'll cover the problems we've\nencountered and solutions we've put in place.\n\nThe following highlight the issues we'll discuss during the talk:\n\n  * Cache Warming. For content that will likely be in demand, getting it ready in cache before use is a helpful start. \n  * Two-tier caching. In multi-server environments, certain content that changes infrequently and has high-demand can be cached locally on each server. In these cases, having methods to burn the cache on each server becomes critical.\n  * Categorizing Cache. If good estimates exist for the expected demand of certain cache as well as the frequency of change, this can lead to better insight into when to warm that content as well as whether to cache it locally.\n  * Caching comparison with memcached vs. reddis vs. mongo\n  * Cachemodel. Our open-source, mini-framework for simplifying caching in Django. \n  * Adding servers to memcached. And consistent hashing algorithms to avoid having to burn all cache when the cache cluster changes in size.\n  * Elasticache on AWS.\n\nAs caching problems become more common, better layers and mini-frameworks will\nhelp simplify and elegantly solve some of these problems.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1405,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-06T00:00:00Z",
        "slug": "where-django-caching-busts-at-the-seams",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'caching', u'django']",
        "pyvideo_summary": "Most mid-sized Django websites thrive by relying on memcached. Though what\nhappens when basic memcached is not enough? And how can one identify when the\ncaching architecture is becoming a bottleneck? We'll cover the problems we've\nencountered and solutions we've put in place.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/dXDLWGY0Tro/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "dXDLWGY0Tro"
    },
    "model": "lore.talk",
    "pk": 124
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=OV5akJtAjgE",
        "view_count": null,
        "speakers": [
            84
        ],
        "title": "Between where the Tutorials end & the Wild West begins: bringing new devs up to speed on Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Between where the Tutorials end & the Wild West begins: bringing new devs up to speed on Django",
        "pyvideo_content": "This is a rough outline of how I learned Django; 4 months ago I was a total\noutsider. Through this process I made mistakes, I had breakdowns, but I walked\naway with a very solid understanding of Django and have proudly have written\nthousands of lines of Python that are in production today. You'll leave this\ntalk with lessons on how to bring new developers to your team up speed on\nDjango.\n\n  1. Read the Django docs (obviously, right?)\n  2. Follow along building the sample application (Polls, Choices, yada yada).\n  3. Decide to jump into writing production ready code. Have a breakdown. Feel like you're trying to boil the ocean with a lighter.\n  4. Realize that building the sample app was cute but nothing compared to writing a real world application with real users and real constraints.\n  5. Re-read the docs.\n  6. Build a real Django app -- no more Polls. I decided to build a single-sign on application that allowed Etsy sellers to login and view all the photos of their all their listings in one place. I will give background as to why I chose this app, how I built it, and what it taught me.\n  7. Start biting off small pieces of production code to figure out what the hell is going on. Learn about commonly used Django packages such as django-registration, django-profiles, taggit, etc. - and what happens when you need to modify the code of those packages.\n  8. Attempt to boil the ocean, again. I needed to do a massive re- architecture of our application, combining several independent Django applications into a single, unified Django project. My first attempt totally failed. I will discuss why this was and key novice mistakes.\n  9. Key realization that knowing Django != knowing Python\n  10. \"When you bang your head enough against the wall, eventually the wall comes down\" -- me. I built a pretty kick ass Django application and I'm quite proud of.\n  11. Celebrate (with lessons learned)!\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1390,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "between-where-the-tutorials-end-the-wild-west-begins-bringing-n",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "4 months ago I had never even seen a Django template. But I'm an engineer;\ncoming up to speed couldn't be that hard, right? Wrong. Doing so efficiently\nand effectively was tough. I went from zero to production ready code used by\nhundreds of users everyday. I'll present my missteps and victories, laying out\nhow other teams can quickly bring new team members, who don't know Django, up\nto speed fast.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/OV5akJtAjgE/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "OV5akJtAjgE"
    },
    "model": "lore.talk",
    "pk": 125
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=pWCAADXd-DI",
        "view_count": null,
        "speakers": [
            95
        ],
        "title": "Cryptography for Django Applications",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Cryptography for Django Applications",
        "pyvideo_content": "# Introduction\n\nThe web is a hostile place, and isn't showing any signs of becoming less so.\nIn order to mitigate this, many developers turn to cryptography.\nUnfortunately, cryptography can be complicated, and is easily circumvented if\nnot properly handled. This presentation will provide an introduction to\ncryptographic tools available to Python/Django applications, appropriate use\ncases for each, proper usage, and operational concerns necessary to operate in\na certified environment. Finally, we will also demonstrate a reusable\napplication that wraps this all up, providing secure key-management\ncapabilities to a running Django environment via the Django admin.\n\n# Why Encrypt?\n\n# Rules of Encryption\n\n  * Don't do it if you don't need it.\n  * Don't write your own.\n  * Understand what you're doing if you do.\n\n# When to encrypt?\n\n## Understand what you're protecting\n\n  * Data\n  * User records\n  * Code\n  * Systems\n\n## Understand your attack vectors\n\n  * Data (backups, revision control)\n  * Systems\n  * Application\n  * Transport\n  * Client\n\n## Understand the types of encryption you might use:\n\n  * Hashing\n\n### Passwords are a special case. Use a key derivation function\n\n  * PBKDF2 \u2013 Upgrade to Django 1.4!\n\n### Algorithms\n\n  * MD5 - fine as a checksum. not fine as a cryptographic hash.\n  * SHA1 - fine as a checksum. becoming less fine as a cryptographic hash every day\n  * SHA2 - so far so good. use as many bits as you can handle.\n\n## Symmetric Encryption\n\n  * Fast\n  * Reversible\n\n### Algorithms\n\n  * Caesar Cipher (for fun puzzles)\n  * DES (don't use)\n  * AES (certified)\n  * Blowfish\n\n## Asymmetric Encryption\n\n  * Slow\n  * One-way\n\n### Algorithms\n\n  * RSA\n  * DSA\n\n#### Uses\n\n##### Signing\n\n###### Web of Trust\n\n  * PGP\n\n###### PKI\n\n##### Encryption\n\n  * PGP\n  * SSL\n  * TLS\n\n# Doing it right\n\n## Use known-good algorithms\n\n  * AES-256\n  * SHA2\n  * RSA\n  * DSA\n\n## Use known-good implementations\n\n  * Open Source is good\n\n## Extra Credit\n\n  * FIPS 140 certified implementations\n  * FIPS 140 / NIST configurations\n\n## Transport (always use HTTPS)\n\n  * Use good algorithms AES-256\n\n## At Rest (insecure servers or backups)\n\n  * Understand the ramifications of key management\n\n# Examples\n\n## Hashing\n\n  * Use a key-derivation function\n\n### Don't be linked-in\n\n  * Salt your hashes (with a secret). \n  * Salt and pepper your hashes if possible (with a known unique value)\n\n## SSL\n\n  * Forced connections\n  * Making the application aware\n  * Hardened cipher selection\n\n### Robust PKI\n\n  * Client authentication\n  * SSL Test Page\n\n## Asymmetric Encryption\n\n### Key Management\n\n  * Using GPG Agent\n  * GPG Manager App\n\n### PGP Files\n\n## Symmetric Encryption\n\n### Key Management\n\n  * Use Asymmetric Encryption\n\n### Use a unique Initialization Vector if possible\n\n  * LoopBack Devices\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1381,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "cryptography-for-django-applications",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'cryptography', u'django']",
        "pyvideo_summary": "A review of encryption in the context of a web application storing sensitive\ninformation. Topics covered include choosing whether to use crypto, selection\nof tools, proper usage (including examples), and operational considerations\nwith respect to security assessment.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/pWCAADXd-DI/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "pWCAADXd-DI"
    },
    "model": "lore.talk",
    "pk": 126
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=fwXEJh63sKc",
        "view_count": null,
        "speakers": [
            55
        ],
        "title": "Django forms in a web API world",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django forms in a web API world",
        "pyvideo_content": "In our quest to modularize the architecture of web applications, we create\nself-containing backend systems that provide web APIs for programmatic\ninteractions. This gives us the flexibility to separate different system\ncomponents. A system with multiple backend components e.g. user profile\nengine, content engine, community engine, analytics engine may have a single\nfrontend application that fetches data from all of these components using\nrespective web APIs.\n\nWith the increased availability of powerful JavaScript frameworks, such\nfrontend applications are often purely JS based to decrease application\nfootprint, increase deployment flexibility and separate presentation from\ndata. The separation is very rewarding from a software engineering standpoint\nbut imposes several limitations on system design. Using django to construct\nthe API for arbitrary consumers comes with the limitation of not being able to\nutilize the powerful django form subsystem to drive forms on these consumers.\nBut is there a way to overcome this restriction?\n\nThis is not a trivial problem to solve and there are only a few assumptions we\ncan make about the web API consumer. It can be a native mobile or desktop -\napplication or browser. We advocate that web APIs should provide sufficient\ninformation about 'forms' so that they can be faithfully reproduced at the\nconsumer end.\n\nEven in a API backend built using django, forms are essential for accepting,\nfiltering, processing and saving data. The django form subsystem provides many\nuseful features to accomplish these tasks. At the same time it facilitates the\nprocess of rendering the form elements in a browser environment. The concepts\nof form fields combined with widgets can go a long way in streamlining the\ninterface to interact with data.\n\nWe propose an architecture to serialize information about django forms (to\nJSON) in a framework independent fashion so that it can be consumed by any\nfrontend application that renders HTML. Such information includes but is not\nlimited to basic form configurations, security tokens (if necessary),\nrendering metadata and error handling instructions. We lovingly name this\narchitecture - django-remote-forms.\n\nAt WiserTogether, we are in the process of building a component based\narchitecture that strictly provides data endpoints for frontend applications\nto consume. We are working towards developing our frontend application for web\nbrowsers using backbone.js as MVC and handlebars as the templating engine.\ndjango-remote-forms helps us streamline our data input interface with the\ndjango forms living at the API backend.\n\nIn this talk we detail the architecture of our components, the mechanism of\ndelivering django form metadata over API and a backbone.js/ handlebars\nimplementation to consume the metadata and reproduce forms.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1388,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "django-forms-in-a-web-api-world",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'django-forms']",
        "pyvideo_summary": "In a world of django powered web APIs and arbitrary consumers, traditional\nmethods of rendering & validating django forms are ineffective. We discuss how\nto uphold the API provider/ consumer separation, yet utilize provider's django\nform subsystem to power forms in a pure JS consumer. We achieve this by\nserializing form configurations, rendering metadata, error handlers & exposing\nthem over API.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/fwXEJh63sKc/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "fwXEJh63sKc"
    },
    "model": "lore.talk",
    "pk": 127
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=U2frH932U1g",
        "view_count": null,
        "speakers": [
            61
        ],
        "title": "Flasky Goodness (or Why Django Sucks?)",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Flasky Goodness (or Why Django Sucks?)",
        "pyvideo_content": "This talk dives into the specifics of why Django isn't always the best tool\nfor the job, general frustrations with the framework, and potential fixes.\n\nIt will balance out with many Django praises too, of course.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1386,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "flasky-goodness-or-why-django-sucks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'flask']",
        "pyvideo_summary": "This talk dives into the specifics of why Django isn't always the best tool\nfor the job, general frustrations with the framework, and potential fixes. It\nwill balance out with many Django praises too, of course.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/U2frH932U1g/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "U2frH932U1g"
    },
    "model": "lore.talk",
    "pk": 128
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=9_39Vbjx23Y",
        "view_count": null,
        "speakers": [
            25
        ],
        "title": "Lessons in Testing",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Lessons in Testing",
        "pyvideo_content": "Testing can be one of the more difficult concepts to pick up in a development\ncycle. With the complexities of large projects, and even small projects,\nwriting effective, automated tests can take many times longer than writing the\ncode and testing it by hand.\n\nThis talk will explore the various patterns of testing that DISQUS has\nimplemented, and iterated upon over the last two years. It will describe how\ntesting has been used to speed up the product lifecycle, improve stability\nthrough automation, and the culture shift required to get there. Most\nimportantly, it will cover the practices that have been put in place that have\nhelped ease the burden of writing tests.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1384,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "lessons-in-testing",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'testing']",
        "pyvideo_summary": "Learn from failures (and successes) around testing patterns and culture in a\ngrowing company, both in amount of code, and number of engineers. We'll dive\ninto how DISQUS adopted testing, and the many challenges we've had to\novercome.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/9_39Vbjx23Y/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "9_39Vbjx23Y"
    },
    "model": "lore.talk",
    "pk": 129
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=vZc5mETltzM",
        "view_count": null,
        "speakers": [
            50
        ],
        "title": "So You Want to Make a Payment: Comparing and contrasting Django payment options",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "So You Want to Make a Payment: Comparing and contrasting Django payment options",
        "pyvideo_content": "When developing eCommerce applications in Django, you will often be faced with\nthe choice of which payment API to use. It's not always clear which services\nare available, which will fit your needs, and how to get started with them.\nThis talk aims to evaluate these payment options from a Django programmer's\nperspective and provide you with background that may help you choose a payment\nprocessor that fits your needs.\n\nTopics will include:\n\n  * High-level overview of how payments work. \n  * Overview of popular payment options: Google Checkout, Authorize.net, Payflow Payments, Braintree, Stripe, etc. \n  * Compare and contrast these payment gateway APIs \n    * compare ease of use\n    * features \n    * price\n  * General overview of payment gateway web interfaces \n  * Example Code snippets for payment processing\n  * Useful Python/Django payment-related modules \n  * Q&A \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1391,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "so-you-want-to-make-a-payment-comparing-and-contrasting-django-",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'payments']",
        "pyvideo_summary": "So you've developed an eCommerce site and now you want users to be able to\nmake payments. The aim of this talk will be to introduce and compare some\ncommon payment gateway options, such as Payflow, Authorize.net, Stripe, and\nBraintree, with the focus of integrating them into Django projects.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/vZc5mETltzM/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "vZc5mETltzM"
    },
    "model": "lore.talk",
    "pk": 130
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=z751qhAzMb4",
        "view_count": null,
        "speakers": [
            41
        ],
        "title": "Using Celery with Social Networks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Using Celery with Social Networks",
        "pyvideo_content": "Twitter conditionally rate limits based on IP address rather than access token\neven when one is provided for some of its API calls. Facebook has at least 10\nunique error messages to indicate a bad or expired access token (that I've\nfound so far). LinkedIn's pagination has an occasional off-by-one bug\nresulting in an endless list of 1-user pages. Let's face it: interfacing with\nsocial networks is tricky. Celery helps, but to provide stable, reliable, and\nfast social features for your website, you'll need an arsenal of strategies\nand tools to get you the rest of the way there.\n\nBy the end of this talk, you'll understand how to set up tasks to quickly\nserve users with massive networks by employing intelligent distribution.\nYou'll be able to design robust processes to handle inconsistencies or\ninstabilities in 3rd party APIs. And you'll know how to have confidence that\nthe work you intend to do gets done, regardless of external rate limits,\npagination design, or API call dependency chains.\n\nThis talk is intended for people who have basic familiarity with celery and\nwould like to learn more about how to take advantage of it for large,\ndistributed task loads.\n\n## Outline\n\nI. Intro\n\nA. 3rd party interfaces are hard\n\n    \n      * Speed\n    \n        * Much slower than local data\n        * Users may still expect near-immediate results\n    \n      * Rate limits\n    \n        * Different rules for every service\n        * Need to handle reactive & proactive as some don't publish rates\n    \n      * Instability\n    \n        * Outages (yes, Facebook does go down)\n        * Random failures\n    \n\nB. Why Celery?\n\n    \n      * Asynchronous\n      * Distributed\n      * Fault tolerant\n    \n\nII. Task Organization\n\n    \n    A. Small, atomic tasks (1 API call per task)\n    B. Minimal message state\n    \n       * Primitive types only (no model instances!)\n       * Defer as much data access to the task itself as possible\n    \n    C. Create Task subclasses for common patterns\n    D. Whenever possible, make tasks idempotent\n    \n\nIII. Task Distribution\n\n    \n     A. Managing pagination\n    \n        * For a known set size\n    \n          * Where limit/offset is supported, launch all page tasks simlutaneously\n          * Otherwise, 1 page launches the next as soon as the next cursor is obtained\n    \n        * For an unknown set size\n    \n          * Set max simultaneous pages\n          * Task is terminal if blank, otherwise launches page w/ offset + max pages\n    \n        * Setting page size is an art, not a science\n    \n          * Minimize the number of api calls when possible\n          * Avoid long-running tasks by setting a timeout ceiling\n          * Avoid the temptation to pass API data to dependent tasks\n    \n     B. Tracking task dependencies (\"Done?\" is difficult for distributed systems)\n    \n        * Use an external backend to store a dependency tree\n        * Subclass ResultSet to evaluate the task state of the tree\n        * Requires ignore_result=False\n    \n\nIV. Rate Limiting\n\n    \n    A. Problems\n    \n       * Celery's rate limiting doesn't do what you think it does\n       * 3rd party rate limits depend on many factors\n    \n    B. Solution\n    \n       * For services with known rate limits:\n    \n         * Use an external backend to store rate limit counters\n         * Increment counters based on rate limit factors per api call\n    \n       * For services with unknown rate limits:\n    \n         * Use an external backend to store rate limit backoff counters\n         * Ramp up / ratchet down call rate by power law as api calls fail/succeed\n    \n\nV. Failover\n\nA. Problems\n\n    \n      * Celery's countdown doesn't do what you think it does\n      * 3rd parties can fail in lots of \"interesting\" ways\n    \n\nB. Solution\n\n    \n      * Implement native RabbitMQ alternative to countdown\n      * Create task base classes per social network to handle error conditions\n    \n\nVI. Multiple queues\n\n    \n    A. Better control over task priority management & resource distribution\n    B. Not all social accounts are created equal (handling whales & spikes)\n    C. When you can't stream updates, use a trickle queue\n    \n\nVII. Celerybeat considered harmful\n\n    \n     A. Periodic task persistence gets out of sync with code\n     B. Just 1 more process to manage\n     C. Cron: it's just. not. that. hard.\n    \n\nVIII. Debugging\n\n    \n      A. Don't use \"always eager\"\n      B. Logging, logging, logging\n      C. Unit tests are good, but integration tests save lives\n    \n\nIV. Gotchas\n\n    \n    A. Open socket prevents Celery soft timeout\n    B. Celery soft timeout doesn't retry the task\n    C. If result state is not known, Celery reports \"PENDING\"\n    \n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1382,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "using-celery-with-social-networks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'celery', u'django']",
        "pyvideo_summary": "Many web applications need to interface with social networks, and celery, a\nPython distributed task queue library, is a great tool for the job. However,\nachieving speed and stability can be difficult. This talk will cover task\norganization/distribution, rate limiting, failover, and other practices to aid\nin working with social networks at scale.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/z751qhAzMb4/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "z751qhAzMb4"
    },
    "model": "lore.talk",
    "pk": 131
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=3_R3DYwBWyY",
        "view_count": null,
        "speakers": [
            20
        ],
        "title": "What is Django's Role on Mobile?",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "What is Django's Role on Mobile?",
        "pyvideo_content": "# Intro\n\n  * Django's version of MVC vs. iOS/Android version of MVC\n  * How the platforms differ from Django\n  * What is similar to Django\n\n# API\n\n  * Easiest way for Django to be used in conjunction with mobile today\n  * Big fat requests with lots of data preferable to many smaller requests\n  * Authentication best practices for mobile backend APIs\n\n# PhoneGap\n\n  * Can actually use Django to build your mobile app today\n  * JavaScript tricks to get around things like tap delay\n  * How much Django is really used vs. how much JavaScript\n  * Offline caching\n  * Performance issues with this approach\n\n# Future\n\n  * Quick look at RubyMotion\n  * Turns out it's possible to cross-compile Python for iOS\n  * Android has Py4A (including interpreter embedding)\n  * What can be done with this? Mobile Django.\n\n# Conclusion\n\n  * They are different worlds, need to be careful to respect both\n  * Even today Django proves useful as an API layer\n  * Django web apps in native wrapper can be a solution, albeit with its issues\n  * As hardware gets better, we may see something like an embedded Django\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1383,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "what-is-djangos-role-on-mobile",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'mobile']",
        "pyvideo_summary": "Mobile grows bigger each year, but we love the web, and Django. Where does our\nknowledge and experience fit in this new ecosystem? What kind of a role can\nDjango play on fast-growing platforms like iOS and Android?\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/3_R3DYwBWyY/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "3_R3DYwBWyY"
    },
    "model": "lore.talk",
    "pk": 132
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=NrkopXN9sQg",
        "view_count": null,
        "speakers": [
            63
        ],
        "title": "Why the Django Community Sucks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Why the Django Community Sucks",
        "pyvideo_content": "In 2010, Eric Florenzano ignited a fever following his lightfooted and\nlighthearted placement of a mirror in front of the hardest of the hardcore in\nthe django community with his presentation, \u201cWhy Django Sucks, and How We can\nFix It.\u201d Then, a year later, at DjangCon 2011, Steve Holden grasped the self-\ncritique baton with an even steeper challenge, making a claim that he\ndescribed as \u201cthe most outrageous thing you can say\u201d - that the Django\ndocumentation sucked.\n\nThe Django documentation, already widely considered the best in its class, has\nresponded to the critique and continues to improve daily.\n\nAlso widely viewed as a top strength of Django is its community. While Django\nenjoys one of the most thoughtful, patient, and responsive communities in the\nworld of open source web frameworks, it has a special opportunity for learning\nin Washington, D.C., where many of the most successful and voracious non-\nprofit advocacy organizations call home.\n\nThis presentation will examine some of their tactics and compare them with\nthose employed by the Django community. Among the topics covered will be\nmobilization of new troops, building and listening to diverse coalitions, and\nidentifying and reaching out to under-represented populations.\n\nThe presenter comes from a decade of experience in non-profit social justice\nactivism. Having been a Django user for 3.5 years and involved in the\ncommunity for 2, will be at only his second DjangoCon.. Freshly imported, he\nhas the perspective of a passionate newcomer rather a seasoned veteran.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1385,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-05T00:00:00Z",
        "slug": "why-the-django-community-sucks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "Continuing in the tradition of self-deprecation that has made DjangoCon\nfamous, a relative newcomer will outline what the Django community can learn\nfrom the world of social activism.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/NrkopXN9sQg/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "NrkopXN9sQg"
    },
    "model": "lore.talk",
    "pk": 133
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=j2ZHZWfx60Y",
        "view_count": null,
        "speakers": [
            26
        ],
        "title": "A Gringo's Guide to Internationalization",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "A Gringo's Guide to Internationalization",
        "pyvideo_content": "There's often a bubble in the English-speaking programming world that the\nentire internet runs on English. Our Top-level domains are shortened english\nwords. Our programming languages--Python in particular--try to emulate English\nwords and grammar.\n\nFirmly in place in this world for many years, my first attempt to translate a\npre-existing site came with a high sticker shock of nuanced difficulty. This\ntalk covers all the lessons I learned in taking a fully-fleshed web app with\nno translation (and a programmer with no translation experience) to being\ncompletely translated.\n\n# Talk Overview\n\n  1. Introduction to Translation\n    1. Overview of gettext\n    2. Brief history of a translation\n      1. Add gettext calls\n      2. `django-admin.py makemessages`\n      3. Ship po file to translation service\n      4. Receive file back\n      5. Compile\n      6. Fin\n    3. gettext vs gettext_lazy\n  2. Batteries Included\n    1. gettext Python calls\n    2. Middleware\n    3. template tags\n      1. trans vs. blocktrans\n    4. Anti-patterns of the battery included use.\n      1. Heavy whitespace in blocktrans\n      2. Monster-sized translations\n  3. The best laid plans of mice and men...\n    1. Problems that get in the way of A history of a translation.\n      1. Realize half the site is still untranslated\n      2. Edit out the translations you already had translated to avoid re-curring costs\n      3. Have the product adjust so two words change\n      4. Realize common text that's in the database\n      5. Fin?\n    2. Patterns and tools to help\n      1. `poxx.py` and the idea of a 'canonical' po file.\n      2. `dbgettext`\n      3. Wholly-translated template files (translate_include, trans_render)\n  4. Advanced Translation Technique\n    1. While undocumented, translation backend is pretty darn flexible and the source code is a treasure trove to make 'impossible' use cases not too bad.\n    2. Overview of how the translation service works behind the scenes\n      1. `_translation` thread local\n      2. Merged translations (root->app->default)\n      3. Sessions vs. Accept-Language\n      4. Middleware and Context processors\n    3. Example of advanced translation code: Multi-tenancy translation.\n      1. Translating some sites, not translating others\n      2. Translating Site A one way, Site B another\n      3. Using an English translation for duct-tape and profit.\n  5. Why Django's i18n sucks.\n    1. In the vein of the \"Django Sucks\" Key note. It doesn't really, but it could use some changes--from minor to major.\n    2. Why .po Files are archaic and limited.\n    3. What we can do to improve for 1.5 and beyond.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1379,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "a-gringos-guide-to-internationalization",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'internationalization']",
        "pyvideo_summary": "Coming from a speaker who escaped a notion to \"why would we need to\ntranslate?\" this talk aims to show what actually goes into translating a\nwebsite or app using Django's Internationalization tools. Covered will be an\noverview of batteries included, best practices and anti-patterns in using\nthem, and some third party tools to help make your life escaping the myth of a\nLingua Franca easier.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/j2ZHZWfx60Y/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "j2ZHZWfx60Y"
    },
    "model": "lore.talk",
    "pk": 134
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=IKQzXu43hzY",
        "view_count": null,
        "speakers": [
            15
        ],
        "title": "API Design Tips",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "API Design Tips",
        "pyvideo_content": "If you're a developer of any sort (Django, Python, Javascript, etc), chances\nare that someone, at some point, will have to take the code you've written &\nuse it in a different context. This is even more amplified if you work on OSS,\nwhere people _will_ use it in ways you've never dreamed about.\n\nThis talk is a reflection on my experience building libraries for other\npeople's consumption & thoughts on how to design/make (non-HTTP) APIs in a way\nthat will make others love you (or at least not hunt you down & strangle you).\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1398,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "api-design-tips",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'api', u'django']",
        "pyvideo_summary": "The focus of this talk will be on some pragmatic tips on how to design\nprogrammatic (non-web-based) APIs for use by other developers.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/IKQzXu43hzY/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "IKQzXu43hzY"
    },
    "model": "lore.talk",
    "pk": 135
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=Is0TIzSG3eg",
        "view_count": null,
        "speakers": [
            71
        ],
        "title": "Creating Dynamic Applications with Django and Backbone.js",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Creating Dynamic Applications with Django and Backbone.js",
        "pyvideo_content": "Django is a great tool for creating powerful database-driven web applications\nquickly. The ORM, form processing, the admin interface, and wealth of\ncommunity applications make Django the right tool for a number of situations.\n\nOne thing that Django doesn\u2019t do well is make it terribly easy to create\nhighly-interactive, dynamic interfaces. There are solutions that people are\nworking on. This talk will be about using Django with Backbone.js to help\ncreate these interfaces. Backbone.js is a Javascript framework that, in many\nways, sees the world in the same way as Django. These two tools can complement\neach other nicely.\n\nTopics:\n\n  * Similarities and differences in how the two frameworks see the world\n  * Creating REST interfaces with Django REST Framework\n  * Tools to ease the interface between Django and Backbone\n  * Templating strategies\n  * Shortcomings and implications on accessibility\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1402,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "creating-dynamic-applications-with-django-and-backbonejs",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "See how well Django and Backbone.js can complement each other, and learn a few\nbest-practices for building dynamic web applications using these tools in\nconcert.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/Is0TIzSG3eg/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "Is0TIzSG3eg"
    },
    "model": "lore.talk",
    "pk": 136
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=YM4F6sSAu9k",
        "view_count": null,
        "speakers": [
            86
        ],
        "title": "Debugging Live Python Web Applications",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Debugging Live Python Web Applications",
        "pyvideo_content": "This talk will go over some of the ways in which a monitoring system such as\nNew Relic can be used to focus in on where problems are arising in a Python\nweb application using a framework such as Django. It will also describe how\nyou can then use that information to drill down even further by applying\nseparate debugging tools and techniques rather than monitoring systems.\nDebugging tools aren't generally associated with production systems however\nand even mentioning them in relation to production systems often makes DevOps\npeople rather nervous.\n\nThe main purpose of the talk therefore is to look at a range of debugging\ntools and techniques which can be applied to web applications but also\nseparate them into what might and might not be realistically used on live\nproduction web applications. It will then describe the use of an embedded\ninteractive console port as a gateway into a live web application, how one may\nsetup a set of predefined commands that could be issued against a live web\napplication, or for the brave, how it could be used to fire up an embedded\nPython interpreter prompt or pdb session.\n\nTopics to be touched on would include:\n\n  * Browser viewable error pages.\n  * Browser based debuggers.\n  * Python interactive debuggers.\n  * Post-mortem exception analysis.\n  * Methods for dumping Python stack traces\n  * Methods for dumping C stack traces.\n  * Methods for analyzing thread utilization.\n  * Interactive process introspection tools.\n  * Error reporting and logging services.\n  * Performance monitoring services.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1395,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "debugging-live-python-web-applications",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'debugging', u'django']",
        "pyvideo_summary": "Monitoring tools record the result of what happened to your web application\nwhen a problem arises, but for some classes of problems, monitoring systems\nare only a starting point. Sometimes it is necessary to take more intrusive\nsteps to plan for the unexpected by embedding mechanisms that will allow you\nto interact with a live deployed web application and extract even more\ndetailed information.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/YM4F6sSAu9k/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "YM4F6sSAu9k"
    },
    "model": "lore.talk",
    "pk": 137
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=bdqLtx3K36k",
        "view_count": null,
        "speakers": [
            12
        ],
        "title": "Designing Your Open Source Project",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Designing Your Open Source Project",
        "pyvideo_content": "There is an ever present rift between designers and developers and it is one\nthat has existed since our paths started crossing. While it has almost become\na requirement for designers to be able to grok the code they work with on a\ndaily basis, that has unfortunately had no effect on the willingness of\ndesigners to work on open source projects.\n\nFortunately, if your project is in need of a designer, there are ways that you\ncan make your project more appealing to our \u201cspecial breed\u201d of personality. In\nthis quick talk, we\u2019ll jump into the mind of your typical designer, show you\njust how many similarities we share and then apply that knowledge to make your\nproject easy and appealing for designers to jump into.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1392,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "designing-your-open-source-project",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'opensource']",
        "pyvideo_summary": "There is an ever present rift between designers and developers and it is one\nthat has existed since our paths started crossing. We'll talk about how to be\nmindful of design in your own open source project and how to attract designers\nto help your project become even more awesome.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/bdqLtx3K36k/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "bdqLtx3K36k"
    },
    "model": "lore.talk",
    "pk": 138
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=nocGRsytBkk",
        "view_count": null,
        "speakers": [
            45
        ],
        "title": "Django on Gevent",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django on Gevent",
        "pyvideo_content": "Gevent is an ultra-fast networking library built on top of the greenlet\nmodule. Greenlets are the ideal solution to making Django's synchronous API\ncalls possible in a cooperative concurrency environment.\n\nI'll begin with an overview of the models of network programming, including\nthreading, callbacks, and coroutines. I'll explain how greenlets (coroutines)\nwork in harmony to provide simple blocking network APIs while not blocking\nexecution of the entire thread. I'll show how easy it is to integrate other\nnetwork services into your app.\n\nAs an exploration into using realtime features in Django, I'll demonstrate a\nsimple realtime collaboration app that uses websockets for communication. I\nwill show how to integrate ZeroMQ to allow the app to scale beyond a single\nserver. I will also show how to attach to and monitor your web app using\ngevent.backdoor.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1393,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "django-on-gevent",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'gevent']",
        "pyvideo_summary": "This is an introduction to using the Gevent networking library to empower your\nDjango application with realtime features and resource-efficient cooperative\nconcurrency. Django's synchronous APIs make it impractical to use in a\ncallback-based networking library, but fast single-threaded concurrency is\nstill possible using the mind-blowing capabilities of coroutines.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/nocGRsytBkk/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "nocGRsytBkk"
    },
    "model": "lore.talk",
    "pk": 139
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=Wb83VL3k3zo",
        "view_count": null,
        "speakers": [
            48
        ],
        "title": "How we found our security best practices (and what they are)",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "How we found our security best practices (and what they are)",
        "pyvideo_content": "Privacy and security are key parts of Mozilla's mission, and we build some of\nthe largest Django applications on the web, so being at the absolutely\nforefront of security is crucial to us. And having a great user experience is,\ntoo. So over the past few years, we've developed a number of proposals, tools\n--like Bleach and django-ratelimit--and best practices, and we've wrapped\nthese up into our application template Playdoh and an app called Funfactory.\n\nI'll share those best practices and their motivations. We'll also go over a\nnumber of tools, settings, and even some fairly new web standard proposals\n(with tools, of course) to help you build the most secure Django applications\nyou can, at whatever scale you're building.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1394,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "how-we-found-our-security-best-practices-and-what-they-are",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'security']",
        "pyvideo_summary": "Mozilla takes data security very seriously. We have AppSec, OpSec, and\nInfraSec teams, and our web developers have baked our security best practices\ninto documentation and a Django app called Funfactory. Hear how we came to\nthose best practices, what they are, and how to follow them.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/Wb83VL3k3zo/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "Wb83VL3k3zo"
    },
    "model": "lore.talk",
    "pk": 140
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=xgWFTrXn0_U",
        "view_count": null,
        "speakers": [
            74
        ],
        "title": "Maintaining Your Sanity While Maintaining Your Open Source App",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Maintaining Your Sanity While Maintaining Your Open Source App",
        "pyvideo_content": "## Introduction/Overview\n\nSo you want to release your Django app into the wild. Now what? I'll go over\npackaging your application to add to the Python Package Index (PyPi), creating\ndocumentation to host on Read The Docs and setup an environment to test your\napplication against different versions of Python and Django. I'll also go over\nsome things you should and shouldn't do when maintaining your app over the\nyears.\n\n## Packaging\n\n  * Creating a setup.py\n  * Registering your package\n  * Uploading your package\n  * Sane versioning with PEP386\n\n## Documentation\n\n  * Getting started with Sphinx\n  * Using Read the Docs\n\n## Testing\n\n  * Running your app tests\n  * Testing multiple Python/Django versions with tox\n  * Testing your documentation build\n\n## Things to Do\n\n  * State your goals\n  * Let others help you\n  * Include a license\n  * Prepare for the future\n\n## Things to Avoid\n\n  * Rejecting every contribution\n  * Accepting every contribution\n  * Developer burnout\n\n## Conclusion\n\nReusable applications are my favorite feature of Django. It does take work to\nmaintain an open source app but it can be quite rewarding. If you use these\ntools you can help provide your users with the best experience and empower\nthem to help you with your application.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1403,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "maintaining-your-sanity-while-maintaining-your-open-source-app",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "Django has a thriving community of open source pluggable applications.\nMaintaining an external application can be a rewarding experience and doesn't\nneed to take over your life. Learn what it takes to package, document and test\nyour Django app so that others can use and contribute to what you've built.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/xgWFTrXn0_U/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "xgWFTrXn0_U"
    },
    "model": "lore.talk",
    "pk": 141
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=nwr_G6Nln3s",
        "view_count": null,
        "speakers": [
            47,
            8
        ],
        "title": "OpenBlock: Overview & Initial Experience",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "OpenBlock: Overview & Initial Experience",
        "pyvideo_content": "# Abstract\n\nWhat do you do if EveryBlock isn't available in your city? OpenBlock, released\nto the community from the Knight-funded project, EveryBlock.com, is a\nneighborhood news project aiming to provide a framework for \"hyper-local\"\ncivic data. Over the past few years, the open source project has been\nmaintained by the non-profit OpenPlans. Their goal was to simplify and\naccelerate adoption of OpenBlock by making it easier to use. Today, Caktus is\nworking with Ryan Thornburg of the UNC School of Journalism and Mass\nCommunication to bring OpenBlock to rural North Carolina newspapers. Open\nRural aims to leverage OpenBlock to increase access to public records in small\ncommunities. This talk focuses on our experience with OpenBlock as we work to\ndeploy OpenRural in North Carolina.\n\n# Outline\n\n## Introduction\n\n  * What is OpenBlock?\n  * How does it relate to/compare to EveryBock?\n  * When/why might you want to incorporate OpenBlock into a site?\n  * What have we (Caktus) be doing with OpenBlock?\n\n## Geocoding\n\n  * Geocoding is a hard problem to solve\n  * String parsing\n  * Places and locations\n  * Street/block data\n  * 3rd-party geocoder comparison\n\n## Getting Started: Choosing Source for Street/Block Data\n\n  * Pros and Cons of Census (Tiger) Data\n  * Pros and Cons of Other Data Sources\n  * Differences with county data and OpenBlocks preference for cities\n  * Our Experience with Columbus County, NC\n\n## Scrapers\n\n  * What are they?\n  * How do you write them?\n  * Our Experience with Some Scrapers for Columbus County, NC\n  * How we improve data accessibility with ScraperWiki\n\n## The Missing Piece: Data Review and Analysis\n\n  * OpenBlock handles scraping and public viewing, but is missing review and analysis\n  * How successful was the geocoder?\n  * How many news items were added this past week?\n  * Why is my scraper failing to run?\n  * Why did this address fail to geocode? How can I correct it?\n  * Data Dashboard\n\n## Adding OpenBlock to an Existing Site\n\n  * Out-of-the-box views/templates\n  * Our experience integrating with local online newspapers\n  * Our OpenRural deployment setup\n\n## Conclusion\n\n  * State of the OpenBlock community\n  * Our plans in North Carolina\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1401,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "openblock-overview-initial-experience",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'openblock']",
        "pyvideo_summary": "OpenBlock is an open-source project aiming to provide a framework for \"hyper-\nlocal\" civic data. We've been using OpenBlock in a project focused on\nincreasing access to public records in rural North Carolina communities. In\nthis talk we provide an overview of OpenBlock and how to get started using it,\nwe describe our experience using it, and discuss some extensions we have made\nto it.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/nwr_G6Nln3s/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "nwr_G6Nln3s"
    },
    "model": "lore.talk",
    "pk": 142
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=3yhfW1BDOSQ",
        "view_count": null,
        "speakers": [
            67
        ],
        "title": "PostgreSQL when it's not your job",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "PostgreSQL when it's not your job",
        "pyvideo_content": "It's a very rare startup these days that has a full-time DBA on staff; mostly,\nthe developers are pressed into service to handle the database as well. In\nthis talk, we'll present the survival skills required to manage your\nPostgreSQL database while trying to push the product out the door.\n\nWe'll cover:\n\n  * Installation.\n  * Basic tuning (it's easier than you think).\n  * Performance, including things you must not do.\n  * Backups and disaster recovery.\n  * Helpful tools, tips and tricks.\n\nDjango experience is helpful, but no PostgreSQL experience required.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1399,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "postgresql-when-its-not-your-job",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django', u'postgresql']",
        "pyvideo_summary": "In this DevOps world, Django developers are increasingly being asked to manage\nthe database as well. In 40 brisk minutes, we will talk about (nearly)\neverything you need to know to bring up, tune, and keep a PostgreSQL database\nhealth. We'll go over installation, basic tuning, backups, disaster recovery,\nand helpful tools and techniques.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/3yhfW1BDOSQ/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "3yhfW1BDOSQ"
    },
    "model": "lore.talk",
    "pk": 143
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=0FD510Oz2e4",
        "view_count": null,
        "speakers": [
            9
        ],
        "title": "Take Two: If I got to do it all over again",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Take Two: If I got to do it all over again",
        "pyvideo_content": "This talk has two parts.\n\nFirst, identifying the principles we're trying to adhere to, and the problems\nwe're trying to solve by re-imagining every single API.\n\nSecond, looking at specific changes to individual APIs.\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1396,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "take-two-if-i-got-to-do-it-all-over-again",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'django']",
        "pyvideo_summary": "Django has always had a strong commitment to backwards compatibility, and is\nused by thousands of developers every day. This means that it's very difficult\nto make large sweeping changes to Django. This talk is a look at how I'd\nredesign different components of Django, if I got to do it all over again.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/0FD510Oz2e4/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "0FD510Oz2e4"
    },
    "model": "lore.talk",
    "pk": 144
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 12,
        "pyvideo_source_url": "http://www.youtube.com/watch?v=yr9HOLipPXc",
        "view_count": null,
        "speakers": [
            16
        ],
        "title": "Views can be Classy!",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Views can be Classy!",
        "pyvideo_content": "It seems like most people in the Django community either don't have any idea\nhow class-based views work or are scared to try them out. I want to help with\na solid introduction to the technology.\n\n  * The usual \"who I am\" bit.\n  * Most other things in Django are classes.\n  *     * models\n  *     * forms\n  *     * even templates\n  * Views should be classes, too.\n  * What view classes are provided by Django.\n  * How to create your own mixins to clean up pain points\n  * Where function-based views are still handy.\n  * Example CBVs for common use cases\n  *     * handling form input for more than one form\n  *     * serving different content based on users\n\n",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 1397,
        "pyvideo_copyright": "Creative Commons Attribution license (reuse allowed",
        "date_delivered": "2012-09-04T00:00:00Z",
        "slug": "views-can-be-classy",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[u'class-based-views', u'django']",
        "pyvideo_summary": "An overview of what class-based views (CBVs) are, which ones are available,\nand how to use them in your projects. I'll also cover creating mixins, where\nfunction-based views still make sense, and how to test CBVs. As part of this,\nI'll be covering my django-braces (https://crate.io/packages/django-braces/)\npackage.\n\n",
        "youtube_thumbnail": "http://i.ytimg.com/vi/yr9HOLipPXc/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "yr9HOLipPXc"
    },
    "model": "lore.talk",
    "pk": 145
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/A_state_of_REST.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=kqIb2dnEF8c",
        "view_count": null,
        "speakers": [
            35
        ],
        "title": "A state of REST.",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "A state of REST.",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2247,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "a-state-of-rest",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "In the Django world there are currently two major REST API libraries, with a new one starting to take hold.\r\n\r\nBut how do you choose?\r\n\r\nIn this talk I plan to give details on how these three apps (TastyPie, Django REST Framework, and django-nap) differ, as well as overlap.",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/kqIb2dnEF8c/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "kqIb2dnEF8c"
    },
    "model": "lore.talk",
    "pk": 146
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Core_Developer_Panel.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=tV0E9JAjmGA",
        "view_count": null,
        "speakers": [],
        "title": "Core Developer Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Core Developer Panel",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2248,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "core-developer-panel",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/tV0E9JAjmGA/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "tV0E9JAjmGA"
    },
    "model": "lore.talk",
    "pk": 147
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/DjangoCon_AU_Lightning_Talks.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=FVENQOiILZo",
        "view_count": null,
        "speakers": [],
        "title": "DjangoCon AU Lightning Talks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "DjangoCon AU Lightning Talks",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2250,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "djangocon-au-lightning-talks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/FVENQOiILZo/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "FVENQOiILZo"
    },
    "model": "lore.talk",
    "pk": 148
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Django_Unstrained.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=drsuU7OdmOM",
        "view_count": null,
        "speakers": [
            29
        ],
        "title": "Django Unstrained",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Django Unstrained",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2245,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "django-unstrained",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "A compilation of outstanding tips, tricks and tools for meeting perfectionist's deadlines with even greater elegance and efficiency. Topics include project structure tips, time-saving template tags, handy model mixin classes, admin ninja skills, testing tools, robust handling of dynamic hyperlinks within rich text content, replacing raw ID widgets with client-friendly ones, convenient view and model method decorators, novel ways of keeping DRY, harnessing inheritance in CBVs, and as much more as I can fit into my time allocation.",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/drsuU7OdmOM/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "drsuU7OdmOM"
    },
    "model": "lore.talk",
    "pk": 149
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Keynote_A_divided_web_a_review.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=wk0b2PYJAXA",
        "view_count": null,
        "speakers": [
            9
        ],
        "title": "Keynote: A divided web, a review of the role of frameworks",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Keynote: A divided web, a review of the role of frameworks",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2241,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "keynote-a-divided-web-a-review-of-the-role-of-frameworks",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/wk0b2PYJAXA/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "wk0b2PYJAXA"
    },
    "model": "lore.talk",
    "pk": 150
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Keynote_The_myth_of_goldilocks.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=vW1ZhO-_ZQk",
        "view_count": null,
        "speakers": [
            96
        ],
        "title": "Keynote: The myth of goldilocks and the three frameworks, Pyramid, Django and Plone",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Keynote: The myth of goldilocks and the three frameworks, Pyramid, Django and Plone",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2249,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "keynote-the-myth-of-goldilocks-and-the-three-frameworks-pyramid",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/vW1ZhO-_ZQk/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "vW1ZhO-_ZQk"
    },
    "model": "lore.talk",
    "pk": 151
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Porting_Django_apps_to_Python_.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=xNZ4OVO2Z_E",
        "view_count": null,
        "speakers": [
            3
        ],
        "title": "Porting Django apps to Python 3",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Porting Django apps to Python 3",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2242,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "porting-django-apps-to-python-3",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "Django 1.5 now supports Python 3, so now's the time to start thinking about porting your apps and sites. Come see how! I'll talk about the porting techniques that work, and present two case studies: porting a site, and porting a reusable app.",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/xNZ4OVO2Z_E/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "xNZ4OVO2Z_E"
    },
    "model": "lore.talk",
    "pk": 152
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Secrets_of_the_testing_masters.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=a713rcagoYU",
        "view_count": null,
        "speakers": [
            6
        ],
        "title": "Secrets of the testing masters",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Secrets of the testing masters",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2244,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "secrets-of-the-testing-masters",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "Django ship with a wide range of tools to help you test your web application, but some of the best tools for testing Django don't come in the box.\r\n\r\nIn this talk, you'll get a brief introduction to two of those tools - Mock and Factory Boy - showing when they should be used, and some practical examples of their usage in a Django test suite.\r\n",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/a713rcagoYU/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "a713rcagoYU"
    },
    "model": "lore.talk",
    "pk": 153
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/The_Server_Side_The_coolest_pa.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=nTMupredqR0",
        "view_count": null,
        "speakers": [
            59
        ],
        "title": "The Server Side: The coolest parts of backend development with Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "The Server Side: The coolest parts of backend development with Django",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2246,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "the-server-side-the-coolest-parts-of-backend-development-with-d",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "There are few feelings more sweet than being a web-app backend developer, and knowing that the vaguaries and frustrations of front-end design, Javascript inconsistencies, and web-browser quirks are \"Someone Else's Problem\". \r\n\r\nThe backend developer, instead, has just three goals: Make the system lightning fast and infinitely scalable; ensure its absolute security and impregnability; and guarantee its absolute correctness, stability, and general perfection in the face of all input at all times.\r\n\r\nI'll take that over having to debug CSS rendering quirks any day of the week.\r\n\r\nIn this talk I'll cover these three goals and how Django helps make each one achievable, including a tour of some of the lesser known features of the framework, such as:\r\n\r\n - Magic tricks you can do with Django's caching framework beyond the naive \"cache this page\", and its ability to take advantage of the browser's own cache in marvellous ways.\r\n - Taking Django's testing framework to its logical (and illogical) extremes. Including clever uses of selenium and webdriver to run unit tests, integration tests and even Javascript tests.\r\n - Considerations of Django use and web security. Including the sorts of things Django does a great job of protecting you from, and the things where your own due dilligence will always be required.",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/nTMupredqR0/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "nTMupredqR0"
    },
    "model": "lore.talk",
    "pk": 154
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://s3.us.archive.org/ndvpyconau2013/Unleash_the_ponies_Using_FeinC.mp4",
        "youtube_title": null,
        "event": 1,
        "pyvideo_source_url": "https://www.youtube.com/watch?v=RnMsobX3soE",
        "view_count": null,
        "speakers": [
            37
        ],
        "title": "Unleash the ponies! Using FeinCMS to add content tools that users love to any Django model",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Unleash the ponies! Using FeinCMS to add content tools that users love to any Django model",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2243,
        "pyvideo_copyright": "CC-BY-SA",
        "date_delivered": "2013-07-05T00:00:00Z",
        "slug": "unleash-the-ponies-using-feincms-to-add-content-tools-that-user",
        "categories": [],
        "language": "English",
        "pyvideo_tags": "[]",
        "pyvideo_summary": "Site editors often struggle with editing rich content and managing variations in layout in Django admin. By rich content we mean text, images, video, tables, and so on. Trying to squeeze all this content into a single rich-text editor is like trying to jam a magical pony into a dog kennel. A better approach is to use a rich content framework like FeinCMS. FeinCMS is a sensible, flexible framework which allows rich content of any shape to be manipulated within any Django model in your project.\r\n\r\nThis talk describes what FeinCMS does and how it works, and most importantly whether it should be pronounced to rhyme with \"Vein\" or \"Vine\". The talk is supported with working example code that shows the progression of a FeinCMS project through several levels of functionality, plus some real-world demonstrations of fully-developed functionality.\r\n\r\nA FeinCMS Document model is just like any Django model, except it has one or more 'templates'. Each 'template' has one or more regions, and each region is a place where an unlimited amount of rich content types can be added, removed or rearranged to form the content in that region. This is all wrapped up in a nifty lightweight Javascript interface for Django's admin, and a surprisingly simple implementation at the database level.\r\n\r\nThe types of content available in a given region is defined by a collection of abstract Django models (e.g. one model to represent a passage of text, another model to represent an image, and so on). Developers are free to define their own FeinCMS content types, using all the usual features of Django models.\r\n\r\nAt the HTML template level, each FeinCMS content item renders a standard template, and can optionally render different templates in different circumstances.\r\n\r\nThis flexibility allows Django developers to quickly design and build CMSes that match the content and layout perfectly, meaning happier content editors, fewer maintenance headaches and greater magical pony freedom.",
        "youtube_thumbnail": "http://i1.ytimg.com/vi/RnMsobX3soE/hqdefault.jpg",
        "is_live": true,
        "youtube_id": "RnMsobX3soE"
    },
    "model": "lore.talk",
    "pk": 155
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "AlexGaynorWhatNoSQLSupportInTheDjangoORMLooksLikeAnd284",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-AlexGaynorWhatNoSQLSupportInTheDjangoORMLooksLikeAnd284.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2453,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-alexgaynorwhatnosqlsupportinthedjangoormlookslikean",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 156
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "AndrewGodwinSouthNewAndOld425",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-AndrewGodwinSouthNewAndOld425.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2454,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-andrewgodwinsouthnewandold425",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 157
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "ArminRonacher355",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-ArminRonacher355.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2455,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-arminronacher355",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 158
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "BenotChesneauGunicornDjangoAndWSGI714",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-BenotChesneauGunicornDjangoAndWSGI714.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2456,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-benotchesneaugunicorndjangoandwsgi714",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 159
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "BenotChesneauRelaxYourProjectWithCouchDB295",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-BenotChesneauRelaxYourProjectWithCouchDB295.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2457,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-benotchesneaurelaxyourprojectwithcouchdb295",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 160
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "DjangoTechnicalDesignPanel420",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-DjangoTechnicalDesignPanel420.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2458,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-djangotechnicaldesignpanel420",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 161
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "EricHolscherGettingTheMostOutOfYourTestSuite492",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-EricHolscherGettingTheMostOutOfYourTestSuite492.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2459,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-ericholschergettingthemostoutofyourtestsuite492",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 162
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "HonzaKrl224",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-HonzaKrl224.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2460,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-honzakrl224",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 163
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "IdanGazitDesignForDevelopersMakingYourFrontendSuckLess291",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-IdanGazitDesignForDevelopersMakingYourFrontendSuckLess291.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2461,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-idangazitdesignfordevelopersmakingyourfrontendsuckl",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 164
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "JacobKaplanMossKeynote270",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-JacobKaplanMossKeynote270.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2462,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-jacobkaplanmosskeynote270",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 165
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "JirkaSchfer340",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-JirkaSchfer340.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2463,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-jirkaschfer340",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 166
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "JoergKressRedSquareDrivingInnovationAtBMWWithDjango763",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-JoergKressRedSquareDrivingInnovationAtBMWWithDjango763.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2464,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-joergkressredsquaredrivinginnovationatbmwwithdjango",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 167
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "KeynoteJanLehnhardt551",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-KeynoteJanLehnhardt551.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2465,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-keynotejanlehnhardt551",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 168
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "LightingTalksThirdDay663",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-LightingTalksThirdDay663.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2466,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-lightingtalksthirdday663",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 169
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "LightningTalksMontag905",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-LightningTalksMontag905.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2467,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-lightningtalksmontag905",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 170
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "LightningTalksSecondDay965",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-LightningTalksSecondDay965.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2468,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-lightningtalkssecondday965",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 171
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "MaciejPasternackiBestOfBothWorldsDeployingDjangoApplica229",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-MaciejPasternackiBestOfBothWorldsDeployingDjangoApplica229.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2469,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-maciejpasternackibestofbothworldsdeployingdjangoapp",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 172
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "MichaelPJungEfficientDjangoHostingForTheMasses869",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-MichaelPJungEfficientDjangoHostingForTheMasses869.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2470,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-michaelpjungefficientdjangohostingforthemasses869",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 173
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2010/Djangoconeu-NoSQLPanel416.m4v",
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "NoSQLPanel416.m4v",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-NoSQLPanel416.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2471,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-nosqlpanel416",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 174
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "PatrickLauberIntroductionToDjangocms198",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-PatrickLauberIntroductionToDjangocms198.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2472,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-patricklauberintroductiontodjangocms198",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 175
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "PeterBengtssonUsingMongoDBInYourDjangoAppImplicationsA238",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-PeterBengtssonUsingMongoDBInYourDjangoAppImplicationsA238.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2473,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-peterbengtssonusingmongodbinyourdjangoappimplicatio",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 176
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "RussellKeithMageeNoBadPonyOrExplainingDjangosDevelopment624",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-RussellKeithMageeNoBadPonyOrExplainingDjangosDevelopment624.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2474,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-russellkeithmageenobadponyorexplainingdjangosdevelo",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 177
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "SeanOConnor982",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-SeanOConnor982.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2475,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-seanoconnor982",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 178
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Song385",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-Song385.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2476,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-song385",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 179
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": null,
        "youtube_title": null,
        "event": 7,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "WillHardy530",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "Djangoconeu-WillHardy530.flv",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2477,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "djangoconeu-willhardy530",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 180
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_3-cmses-in-45-minutes.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "3 Cmses In 45 Minutes",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_3-cmses-in-45-minutes.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2478,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "3-cmses-in-45-minutes",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 181
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_an-iphone-python-love-affair-building-apis-for-mobile.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "An Iphone Python Love Affair Building Apis for Mobile",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_an-iphone-python-love-affair-building-apis-for-mobile.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2479,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "an-iphone-python-love-affair-building-apis-for-mobile",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 182
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_bitbucket-lessons-learned.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Bitbucket Lessons Learned",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_bitbucket-lessons-learned.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2480,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "bitbucket-lessons-learned",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 183
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_celery-an-asynchronous-task-queue-not-only-for-django.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Celery An Asynchronous Task Queue Not Only for Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_celery-an-asynchronous-task-queue-not-only-for-django.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2481,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "celery-an-asynchronous-task-queue-not-only-for-django",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 184
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_closing.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Closing",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_closing.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2482,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "closing",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 185
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_continuous-integration-and-continuous-deployment.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Continuous Integration and Continuous Deployment",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_continuous-integration-and-continuous-deployment.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2483,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "continuous-integration-and-continuous-deployment",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 186
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_core-developers-panel.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Core Developers Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_core-developers-panel.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2484,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "core-developers-panel",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 187
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_deploying-at-an-unusual-scale.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Deploying At An Unusual Scale",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_deploying-at-an-unusual-scale.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2485,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "deploying-at-an-unusual-scale",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 188
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_django-and-pypy-performant-is-a-word.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Django and Pypy Performant is a Word",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_django-and-pypy-performant-is-a-word.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2486,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "django-and-pypy-performant-is-a-word",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 189
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_django-on-rails-getting-resourceful.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Django On Rails Getting Resourceful",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_django-on-rails-getting-resourceful.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2487,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "django-on-rails-getting-resourceful",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 190
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_from-static-to-real-time-one-app-s-journey-into-the-modern-age.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "From Static to Real Time One App S Journey into the Modern Age",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_from-static-to-real-time-one-app-s-journey-into-the-modern-age.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2488,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "from-static-to-real-time-one-app-s-journey-into-the-modern-age",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 191
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_how-i-learned-to-stop-worrying-and-love-python-packaging.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "How I Learned to Stop Worrying and Love Python Packaging",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_how-i-learned-to-stop-worrying-and-love-python-packaging.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2489,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "how-i-learned-to-stop-worrying-and-love-python-packaging",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 192
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_integrating-the-enterprise-using-django.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Integrating the Enterprise Using Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_integrating-the-enterprise-using-django.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2490,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "integrating-the-enterprise-using-django",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 193
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_large-django-sites-at-mozilla.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Large Django Sites At Mozilla",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_large-django-sites-at-mozilla.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2491,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "large-django-sites-at-mozilla",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 194
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_lightning-talks-monday.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks Monday",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_lightning-talks-monday.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2492,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "lightning-talks-monday",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 195
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_lightning-talks-tuesday.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Lightning Talks Tuesday",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_lightning-talks-tuesday.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2493,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "lightning-talks-tuesday",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 196
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_one-size-fits-all-responsive-web-design-with-django-compass-and-the-less-framework.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "One Size Fits All Responsive Web Design with Django Compass and the Less Framework",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_one-size-fits-all-responsive-web-design-with-django-compass-and-the-less-framework.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2494,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "one-size-fits-all-responsive-web-design-with-django-compass-and",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 197
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_opening.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Opening",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_opening.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2495,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "opening",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 198
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_reusable-apps-using-eight-spaces.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Reusable Apps Using Eight Spaces",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_reusable-apps-using-eight-spaces.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2496,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "reusable-apps-using-eight-spaces",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 199
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_scalability-panel.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Scalability Panel",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_scalability-panel.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2497,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "scalability-panel",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 200
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_sprint-introduction.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Sprint Introduction",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_sprint-introduction.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2498,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "sprint-introduction",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 201
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_taming-runtime-dynamic-models-with-django.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Taming Runtime Dynamic Models with Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_taming-runtime-dynamic-models-with-django.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2499,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "taming-runtime-dynamic-models-with-django",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 202
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_the-best-and-worst-of-django-core.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "The Best and Worst of Django Core",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_the-best-and-worst-of-django-core.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2500,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "the-best-and-worst-of-django-core",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 203
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_the-django-orm-and-multilingual-database-contents.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "The Django Orm and Multilingual Database Contents",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_the-django-orm-and-multilingual-database-contents.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2501,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "the-django-orm-and-multilingual-database-contents",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 204
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_the-impact-of-django.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "The Impact of Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_the-impact-of-django.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2502,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "the-impact-of-django",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 205
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_unjoinify-a-module-to-tame-the-sql-beast.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Unjoinify a Module to Tame the Sql Beast",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_unjoinify-a-module-to-tame-the-sql-beast.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2503,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "unjoinify-a-module-to-tame-the-sql-beast",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 206
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_whither-django.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Whither Django",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_whither-django.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2504,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "whither-django",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 207
},
{
    "fields": {
        "abstract": null,
        "youtube_channel_id": null,
        "youtube_views": null,
        "speaker_bio": null,
        "pyvideo_video_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-eu-2011/0_who-cares-about-zope.m4v",
        "youtube_title": null,
        "event": 6,
        "pyvideo_source_url": null,
        "view_count": null,
        "speakers": [],
        "title": "Who Cares About Zope",
        "youtube_copyright": null,
        "conference_url": null,
        "pyvideo_title": "0_who-cares-about-zope.m4v",
        "pyvideo_content": "",
        "youtube_content": null,
        "youtube_duration": null,
        "youtube_summary": null,
        "youtube_likes": null,
        "pyvideo_pk": 2505,
        "pyvideo_copyright": "",
        "date_delivered": null,
        "slug": "who-cares-about-zope",
        "categories": [],
        "language": null,
        "pyvideo_tags": "[]",
        "pyvideo_summary": "",
        "youtube_thumbnail": null,
        "is_live": true,
        "youtube_id": null
    },
    "model": "lore.talk",
    "pk": 208
},
{
    "fields": {
        "github": "",
        "last_updated": "2014-09-27T20:43:31.950Z",
        "prenom": "Malcolm",
        "people": "malcolm",
        "pyvideo_pk": 21,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Malcolm Tredinnick",
        "slug": "malcolm-tredinnick"
    },
    "model": "lore.speaker",
    "pk": 1
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:16.165Z",
        "prenom": "Adrian",
        "people": "adrian",
        "pyvideo_pk": 415,
        "people_photo": "https://secure.gravatar.com/avatar/0e4a313a845e7e83d8c9e5dd97f7d016?s=40&d=mm",
        "people_finding": "https://github.com/adrianholovaty<br>http://twitter.com/adrianholovaty",
        "full_name": "Adrian Holovaty",
        "slug": "adrian-holovaty"
    },
    "model": "lore.speaker",
    "pk": 2
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:53.241Z",
        "prenom": "Jacob",
        "people": "jacobian",
        "pyvideo_pk": 78,
        "people_photo": "https://secure.gravatar.com/avatar/2f5463832ccb768ccb4a1ca3607c27ef?s=40&d=mm",
        "people_finding": "http://del.icio.us/jacobian/<br>http://www.djangosnippets.org/users/jacobian/<br>http://www.flickr.com/photos/jacobian/<br>http://github.com/jacobian<br>http://www.linkedin.com/in/jacobian<br>http://twitter.com/jacobian",
        "full_name": "Jacob Kaplan-Moss",
        "slug": "jacob-kaplan-moss"
    },
    "model": "lore.speaker",
    "pk": 3
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:49.834Z",
        "prenom": "Simon",
        "people": "simon",
        "pyvideo_pk": 14,
        "people_photo": "https://secure.gravatar.com/avatar/ac7005eff7720218df4cf0c72ddf6a3d?d=mm&s=40",
        "people_finding": "http://del.icio.us/simonw<br>http://www.djangosites.org/author/simon/<br>http://www.djangosnippets.org/users/simon/<br>http://www.flickr.com/photos/simon/<br>http://twitter.com/simonw",
        "full_name": "Simon Willison",
        "slug": "simon-willison"
    },
    "model": "lore.speaker",
    "pk": 4
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:06.857Z",
        "prenom": "James",
        "people": "ubernostrum",
        "pyvideo_pk": 25,
        "people_photo": "https://secure.gravatar.com/avatar/aa415d4ce00845ac88118f37ef3f7c26?s=40&d=mm",
        "people_finding": "http://del.icio.us/ubernostrum<br>http://www.djangosnippets.org/users/ubernostrum/<br>http://www.flickr.com/photos/ubernostrum/<br>http://www.linkedin.com/in/ubernostrum<br>http://pownce.com/ubernostrum/<br>http://twitter.com/ubernostrum",
        "full_name": "James Bennett",
        "slug": "james-bennett"
    },
    "model": "lore.speaker",
    "pk": 5
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:54.073Z",
        "prenom": "Russell",
        "people": "freakboy3742",
        "pyvideo_pk": 458,
        "people_photo": "https://secure.gravatar.com/avatar/b91373320dbc3bc52fcd870d3b21748f?d=mm&s=40",
        "people_finding": "http://del.icio.us/freakboy3742<br>http://www.djangosnippets.org/users/freakboy3742/<br>http://www.facebook.com/profile.php?id=793072271<br>http://www.linkedin.com/pub/2/495/777<br>http://twitter.com/freakboy3742",
        "full_name": "Russell Keith-Magee",
        "slug": "russell-keith-magee"
    },
    "model": "lore.speaker",
    "pk": 6
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:51.931Z",
        "prenom": "Daniel",
        "people": "pydanny",
        "pyvideo_pk": 42,
        "people_photo": "https://secure.gravatar.com/avatar/67e05420d4dd3492097aeb77f44f7867?d=mm&s=40",
        "people_finding": "https://bitbucket.org/pydanny<br>http://flickr.com/photos/pydanny<br>http://github.com/pydanny<br>http://www.linkedin.com/profile?viewProfile=&key=6473174&trk=tab_pro<br>http://twitter.com/pydanny",
        "full_name": "Daniel Greenfeld",
        "slug": "daniel-greenfeld"
    },
    "model": "lore.speaker",
    "pk": 7
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:45.423Z",
        "prenom": "Karen",
        "people": "kmtracey",
        "pyvideo_pk": 740,
        "people_photo": "https://secure.gravatar.com/avatar/86c985aa7b37c24e0ba8c2201fc65e8e?d=mm&s=40",
        "people_finding": "",
        "full_name": "Karen Tracey",
        "slug": "karen-tracey"
    },
    "model": "lore.speaker",
    "pk": 8
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:51.547Z",
        "prenom": "Alex",
        "people": "kingkilr",
        "pyvideo_pk": 28,
        "people_photo": "https://secure.gravatar.com/avatar/edcdfd5affb524e0f88ec1a00ed3fe5d?d=mm&s=40",
        "people_finding": "https://bitbucket.org/alex_gaynor<br>https://github.com/alex/<br>http://www.linkedin.com/profile?viewProfile=&key=11712065&locale=en_US&trk=tab_pro<br>http://twitter.com/alex_gaynor",
        "full_name": "Alex Gaynor",
        "slug": "alex-gaynor"
    },
    "model": "lore.speaker",
    "pk": 9
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:27.383Z",
        "prenom": "Andrew",
        "people": "andrew",
        "pyvideo_pk": 19,
        "people_photo": "https://secure.gravatar.com/avatar/077e9a0cb34fa3eba2699240c9509717?s=40&d=mm",
        "people_finding": "",
        "full_name": "Andrew Godwin",
        "slug": "andrew-godwin"
    },
    "model": "lore.speaker",
    "pk": 10
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:22.705Z",
        "prenom": "Julien",
        "people": "julien",
        "pyvideo_pk": 747,
        "people_photo": "https://secure.gravatar.com/avatar/6f40ad29b32551ad3f37258d0801a00d?s=40&d=mm",
        "people_finding": "https://github.com/jphalip<br>https://twitter.com/julienphalip",
        "full_name": "Julien Phalip",
        "slug": "julien-phalip"
    },
    "model": "lore.speaker",
    "pk": 11
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:41.554Z",
        "prenom": "Bryan",
        "people": "bryan",
        "pyvideo_pk": 734,
        "people_photo": "https://secure.gravatar.com/avatar/a60068bce2e73de3a37ca9d2dbe36092?d=mm&s=40",
        "people_finding": "http://delicious.com/avalonstar<br>http://djangosites.org/author/bryan/<br>http://djangosnippets.org/users/revyver/<br>http://facebook.com/profile.php?id=42403178<br>http://flickr.com/photos/avalonstar<br>http://linkedin.com/in/bryanveloso<br>http://pownce.com/bryan/<br>http://twitter.com/bryanveloso",
        "full_name": "Bryan Veloso",
        "slug": "bryan-veloso"
    },
    "model": "lore.speaker",
    "pk": 12
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:10.689Z",
        "prenom": "Carl",
        "people": "carljm",
        "pyvideo_pk": 35,
        "people_photo": "https://secure.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=40&d=mm",
        "people_finding": "https://github.com/carljm<br>http://linkedin.com/in/carljm<br>http://stackoverflow.com/users/3207/carl-meyer<br>http://twitter.com/carljm",
        "full_name": "Carl Meyer",
        "slug": "carl-meyer"
    },
    "model": "lore.speaker",
    "pk": 13
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:27.077Z",
        "prenom": "Justin",
        "people": "justinlilly",
        "pyvideo_pk": 23,
        "people_photo": "https://secure.gravatar.com/avatar/8d45890e1f6bee3cb986cd77777a1360?s=40&d=mm",
        "people_finding": "http://del.icio.us/justinlilly<br>http://www.djangosites.org/author/justinlilly/<br>http://djangosnippets.org/justinlilly<br>http://facebook.com/justinlilly<br>http://flickr.com/justinlilly<br>http://linkedin.com/in/justinlilly<br>http://ma.gnolia.com/people/justinlilly<br>http://www.pownce.com/justinlilly<br>http://twitter.com/justinlilly",
        "full_name": "Justin Lilly",
        "slug": "justin-lilly"
    },
    "model": "lore.speaker",
    "pk": 14
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:38.916Z",
        "prenom": "Daniel",
        "people": "daniellindsley",
        "pyvideo_pk": 364,
        "people_photo": "https://secure.gravatar.com/avatar/ea39e564e226a87b507a00d46e471e10?s=40&d=mm",
        "people_finding": "http://djangosites.org/author/daniellindsley/<br>http://www.djangosnippets.org/users/daniellindsley/<br>http://twitter.com/daniellindsley",
        "full_name": "Daniel Lindsley",
        "slug": "daniel-lindsley"
    },
    "model": "lore.speaker",
    "pk": 15
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:47.890Z",
        "prenom": "Kenneth",
        "people": "kennethlove",
        "pyvideo_pk": 738,
        "people_photo": "https://secure.gravatar.com/avatar/9cbbf3d3f34f5ee7c34d32a1be39e713?s=40&d=mm",
        "people_finding": "https://bitbucket.org/kennethlove<br>https://github.com/kennethlove<br>http://twitter.com/kennethlove",
        "full_name": "Kenneth Love",
        "slug": "kenneth-love"
    },
    "model": "lore.speaker",
    "pk": 16
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:03.220Z",
        "prenom": "James",
        "people": "jtauber",
        "pyvideo_pk": 16,
        "people_photo": "https://secure.gravatar.com/avatar/f2d9cd49c78a2f6151175c7c651a2f16?d=mm&s=40",
        "people_finding": "http://www.djangosites.org/author/jtauber/<br>http://www.facebook.com/profile.php?id=849890499<br>http://www.linkedin.com/in/jtauber",
        "full_name": "James Tauber",
        "slug": "james-tauber"
    },
    "model": "lore.speaker",
    "pk": 17
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:53.288Z",
        "prenom": "Brian",
        "people": "brosner",
        "pyvideo_pk": 15,
        "people_photo": "https://secure.gravatar.com/avatar/b7472bc7aa45c70641c299e9408b78ab?d=mm&s=40",
        "people_finding": "http://www.djangosnippets.org/users/brosner/<br>http://www.flickr.com/photos/brosner/<br>http://pownce.com/brosner/<br>http://twitter.com/brosner",
        "full_name": "Brian Rosner",
        "slug": "brian-rosner"
    },
    "model": "lore.speaker",
    "pk": 18
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:13.836Z",
        "prenom": "Eric",
        "people": "ericholscher",
        "pyvideo_pk": 17,
        "people_photo": "https://secure.gravatar.com/avatar/a985c35d6be3c88a87d92b92b0d3756f?d=mm&s=40",
        "people_finding": "http://delicious.com/ericholscher<br>http://www.flickr.com/photos/ericholscher/<br>http://www.linkedin.com/profile?viewProfile=&key=12499850&trk=tab_pro<br>http://twitter.com/ericholscher",
        "full_name": "Eric Holscher",
        "slug": "eric-holscher"
    },
    "model": "lore.speaker",
    "pk": 19
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:36.493Z",
        "prenom": "Eric",
        "people": "ericflo",
        "pyvideo_pk": 24,
        "people_photo": "https://secure.gravatar.com/avatar/04d6b8e8d3c68899ac88eb8623392150?s=40&d=mm",
        "people_finding": "http://www.djangosnippets.org/users/ericflo/<br>http://iastate.facebook.com/profile.php?id=16904779<br>http://www.flickr.com/photos/83888483@N00/<br>http://www.pownce.com/ericflo/",
        "full_name": "Eric Florenzano",
        "slug": "eric-florenzano"
    },
    "model": "lore.speaker",
    "pk": 20
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:26.540Z",
        "prenom": "Julia",
        "people": "juliae",
        "pyvideo_pk": 750,
        "people_photo": "https://secure.gravatar.com/avatar/cea2b34ae0e15b57e4c022dc6198e8b8?d=mm&s=40",
        "people_finding": "http://www.facebook.com/people/Julia_Elman/<br>http://www.linkedin.com/in/juliaelman<br>http://twitter.com/juliae/",
        "full_name": "Julia Elman",
        "slug": "julia-elman"
    },
    "model": "lore.speaker",
    "pk": 21
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:08.180Z",
        "prenom": "Frank",
        "people": "frankwiles",
        "pyvideo_pk": 18,
        "people_photo": "https://secure.gravatar.com/avatar/a31d318a5359965318d604799c0d3e2c?d=mm&s=40",
        "people_finding": "http://www.linkedin.com/in/frankwiles<br>http://twitter.com/fwiles",
        "full_name": "Frank Wiles",
        "slug": "frank-wiles"
    },
    "model": "lore.speaker",
    "pk": 22
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:59.958Z",
        "prenom": "Kevin",
        "people": "kfricovsky",
        "pyvideo_pk": 4,
        "people_photo": "https://secure.gravatar.com/avatar/af0c0f120ded1fa94dee488bd6b70f5a?s=40&d=mm",
        "people_finding": "",
        "full_name": "Kevin Fricovsk",
        "slug": "kevin-fricovsk"
    },
    "model": "lore.speaker",
    "pk": 23
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:09.695Z",
        "prenom": "Brandon",
        "people": "adoleo",
        "pyvideo_pk": 429,
        "people_photo": "https://secure.gravatar.com/avatar/a5c05cf00cecae25541439b636032d48?s=40&d=mm",
        "people_finding": "http://facebook.com/brandon.konkle<br>http://www.linkedin.com/in/brandonkonkle<br>http://twitter.com/bkonkle/",
        "full_name": "Brandon Konkle",
        "slug": "brandon-konkle"
    },
    "model": "lore.speaker",
    "pk": 24
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:33.766Z",
        "prenom": "David",
        "people": "zeeg",
        "pyvideo_pk": 221,
        "people_photo": "https://secure.gravatar.com/avatar/51567a4f786cd8a2c41c513b592de9f9?s=40&d=mm",
        "people_finding": "http://www.djangosites.org/s/www-curse-com/<br>http://www.djangosnippets.org/users/zeeg/<br>http://www.facebook.com/profile.php?id=503846976<br>http://www.flickr.com/photos/zeeg99<br>http://www.linkedin.com/in/dmcramer",
        "full_name": "David Cramer",
        "slug": "david-cramer"
    },
    "model": "lore.speaker",
    "pk": 25
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:38.084Z",
        "prenom": "Jacob",
        "people": "otherjacob",
        "pyvideo_pk": 36,
        "people_photo": "https://secure.gravatar.com/avatar/9ac966e78d1d6116959d9f6708132020?d=mm&s=40",
        "people_finding": "http://www.delicious.com/roarke<br>http://www.facebook.com/jacobburch<br>http://twitter.com/jacobburch",
        "full_name": "Jacob Burch",
        "slug": "jacob-burch"
    },
    "model": "lore.speaker",
    "pk": 26
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:21.021Z",
        "prenom": "Peter",
        "people": "lincolnloop",
        "pyvideo_pk": 30,
        "people_photo": "https://secure.gravatar.com/avatar/1baff81819df274d57b8b1649b30259d?d=mm&s=40",
        "people_finding": "http://www.linkedin.com/in/lincolnloop<br>http://twitter.com/ipmb",
        "full_name": "Peter Baumgartner",
        "slug": "peter-baumgartner"
    },
    "model": "lore.speaker",
    "pk": 27
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:05.315Z",
        "prenom": "Noah",
        "people": "coderanger",
        "pyvideo_pk": 48,
        "people_photo": "https://secure.gravatar.com/avatar/cf611565f0b79abd0b3dc200ad867661?s=40&d=mm",
        "people_finding": "http://twitter.com/kantrn",
        "full_name": "Noah Kantrowitz",
        "slug": "noah-kantrowitz"
    },
    "model": "lore.speaker",
    "pk": 28
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:50.638Z",
        "prenom": "Simon",
        "people": "drmeers",
        "pyvideo_pk": 840,
        "people_photo": "https://secure.gravatar.com/avatar/36013fa847a29816cc8e5855241bbca6?d=mm&s=40",
        "people_finding": "",
        "full_name": "Simon Meers",
        "slug": "simon-meers"
    },
    "model": "lore.speaker",
    "pk": 29
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:06.989Z",
        "prenom": "Ted",
        "people": "twleung",
        "pyvideo_pk": 6,
        "people_photo": "https://secure.gravatar.com/avatar/1651075c4a3dd77e9e3f57342469f0a1?d=mm&s=40",
        "people_finding": "http://www.facebook.com/ted.leung<br>http://www.flickr.com/photos/twleung/<br>http://www.linkedin.com/in/tedleung<br>http://twitter.com/twleung",
        "full_name": "Ted Leung",
        "slug": "ted-leung"
    },
    "model": "lore.speaker",
    "pk": 30
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:14.624Z",
        "prenom": "Steve",
        "people": "holdenweb",
        "pyvideo_pk": 26,
        "people_photo": "https://secure.gravatar.com/avatar/2c69ccb9eb83c7ef2ba155a850df68a9?d=mm&s=40",
        "people_finding": "http://del.icio.us/steve.holden/<br>http://www.facebook.com/profile.php?id=541388838<br>http://www.flickr.com/people/holdenweb/<br>http://www.linkedin.com/profile?viewProfile=&key=445505<br>http://twitter.com/holdenweb",
        "full_name": "Steve Holden",
        "slug": "steve-holden"
    },
    "model": "lore.speaker",
    "pk": 31
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:00.736Z",
        "prenom": "Zain",
        "people": "zain",
        "pyvideo_pk": 38,
        "people_photo": "https://secure.gravatar.com/avatar/81815b0ee63c3432b8fd53781f5b0997?s=40&d=mm",
        "people_finding": "http://www.djangosnippets.org/users/zain/<br>http://www.linkedin.com/in/zainm<br>http://twitter.com/zainy",
        "full_name": "Zain Memon",
        "slug": "zain-memon"
    },
    "model": "lore.speaker",
    "pk": 32
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:23.461Z",
        "prenom": "Ken",
        "people": "kencochrane",
        "pyvideo_pk": 749,
        "people_photo": "https://secure.gravatar.com/avatar/5b5661a3a443a2a4bece8674006bd6ef?d=mm&s=40",
        "people_finding": "https://bitbucket.org/kencochrane<br>http://delicious.com/kencochrane<br>http://www.djangosites.org/author/kencochrane/<br>http://www.flickr.com/photos/32957595@N04/<br>https://github.com/kencochrane<br>http://www.linkedin.com/in/kencochrane<br>http://stackoverflow.com/users/356788/ken-cochrane<br>https://twitter.com/KenCochrane",
        "full_name": "Ken Cochrane",
        "slug": "ken-cochrane"
    },
    "model": "lore.speaker",
    "pk": 33
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:57.461Z",
        "prenom": "Andy",
        "people": "andymckay",
        "pyvideo_pk": 8,
        "people_photo": "https://secure.gravatar.com/avatar/45ae4ec5560797289f84140b0b06c7e2?s=40&d=mm",
        "people_finding": "http://github.com/andymckay<br>http://twitter.com/clearwind",
        "full_name": "Andy Mckay",
        "slug": "andy-mckay"
    },
    "model": "lore.speaker",
    "pk": 34
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:48.680Z",
        "prenom": "Curtis",
        "people": "funkybob",
        "pyvideo_pk": 1064,
        "people_photo": "https://secure.gravatar.com/avatar/e8ecc517223c3e0cbfd0108019d87bed?d=mm&s=40",
        "people_finding": "http://bitbucket.org/funkybob<br>http://github.com/funkybob",
        "full_name": "Curtis Maloney",
        "slug": "curtis-maloney"
    },
    "model": "lore.speaker",
    "pk": 35
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:48.597Z",
        "prenom": "Idan",
        "people": "idan",
        "pyvideo_pk": 45,
        "people_photo": "https://secure.gravatar.com/avatar/0d877f80c535471ede57c7a4c0f487de?d=mm&s=40",
        "people_finding": "http://flickr.com/photos/idangazit<br>http://github.com/idangazit<br>http://twitter.com/idangazit",
        "full_name": "Idan Gazit",
        "slug": "idan-gazit"
    },
    "model": "lore.speaker",
    "pk": 36
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:56.279Z",
        "prenom": "Greg",
        "people": "cogat",
        "pyvideo_pk": 1063,
        "people_photo": "https://secure.gravatar.com/avatar/3a8c9cad464dd9df7fca5fe1f61eb28b?s=40&d=mm",
        "people_finding": "",
        "full_name": "Greg Turner",
        "slug": "greg-turner"
    },
    "model": "lore.speaker",
    "pk": 37
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:17.190Z",
        "prenom": "Adam",
        "people": "adam",
        "pyvideo_pk": 11,
        "people_photo": "https://secure.gravatar.com/avatar/b2d304e86ff8d5487f7a38ad8a7ced8c?s=40&d=mm",
        "people_finding": "http://www.djangosites.org/author/adamfast/<br>http://www.flickr.com/photos/adamfastphoto/<br>http://www.linkedin.com/in/adamfast<br>http://www.twitter.com/adamcanfly",
        "full_name": "Adam Fast",
        "slug": "adam-fast"
    },
    "model": "lore.speaker",
    "pk": 38
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:55.198Z",
        "prenom": "Chris",
        "people": "chrismcavoy",
        "pyvideo_pk": 5,
        "people_photo": "https://secure.gravatar.com/avatar/7b496f4e0e18279ffeb75ab1a3edea7c?s=40&d=mm",
        "people_finding": "http://del.icio.us/mcavoy76<br>http://www.djangosites.org/author/chrismcavoy/<br>http://www.djangosnippets.org/users/cmcavoy/<br>http://www.facebook.com/profile.php?id=722505632<br>http://flickr.com/photos/mcavoys/<br>http://www.linkedin.com/profile?viewProfile=&key=4208517",
        "full_name": "Chris McAvoy",
        "slug": "chris-mcavoy"
    },
    "model": "lore.speaker",
    "pk": 39
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:50.707Z",
        "prenom": "Chris",
        "people": "moffitcb",
        "pyvideo_pk": 2,
        "people_photo": "https://secure.gravatar.com/avatar/3b3f60cb7e572ff1566453468f287ca4?s=40&d=mm",
        "people_finding": "http://www.djangosites.org/s/www-satchmoproject-com/<br>http://www.djangosnippets.org/users/chris/",
        "full_name": "Chris Moffitt",
        "slug": "chris-moffitt"
    },
    "model": "lore.speaker",
    "pk": 40
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:35.712Z",
        "prenom": "David",
        "people": "dgouldin",
        "pyvideo_pk": 730,
        "people_photo": "https://secure.gravatar.com/avatar/4d35fe1196f83bef3f8c5f80b1052cc9?d=mm&s=40",
        "people_finding": "http://delicious.com/dgouldin<br>http://www.djangosnippets.org/users/dgouldin/<br>http://www.facebook.com/profile.php?id=519383432<br>http://www.flickr.com/photos/30272122@N00/<br>http://www.twitter.com/dgouldin",
        "full_name": "David Gouldin",
        "slug": "david-gouldin"
    },
    "model": "lore.speaker",
    "pk": 41
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:39.191Z",
        "prenom": "Shawn",
        "people": "shawnr",
        "pyvideo_pk": 22,
        "people_photo": "https://secure.gravatar.com/avatar/01607fe417d6c7affa97944f87638d60?s=40&d=mm",
        "people_finding": "http://www.djangosites.org/author/shawnr/",
        "full_name": "Shawn Rider",
        "slug": "shawn-rider"
    },
    "model": "lore.speaker",
    "pk": 42
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:04.187Z",
        "prenom": "Ben",
        "people": "bslavin",
        "pyvideo_pk": 50,
        "people_photo": "https://secure.gravatar.com/avatar/cd3c21311e8f847be0bec77678198358?d=mm&s=40",
        "people_finding": "https://www.facebook.com/benslavin<br>https://github.com/benslavin<br>http://www.linkedin.com/in/benslavin<br>https://twitter.com/benslavin",
        "full_name": "Ben Slavin",
        "slug": "ben-slavin"
    },
    "model": "lore.speaker",
    "pk": 43
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:46.589Z",
        "prenom": "Brian",
        "people": "luftyluft",
        "pyvideo_pk": 27,
        "people_photo": "https://secure.gravatar.com/avatar/2768fc2f40175b02ef61d17ea97a7863?s=40&d=mm",
        "people_finding": "http://del.icio.us/kingoflunnova<br>http://www.linkedin.com/in/brianluft<br>http://twitter.com/unbracketed",
        "full_name": "Brian Luft",
        "slug": "brian-luft"
    },
    "model": "lore.speaker",
    "pk": 44
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:42.321Z",
        "prenom": "Cody",
        "people": "codysacoder",
        "pyvideo_pk": 735,
        "people_photo": "https://secure.gravatar.com/avatar/db17092663e716b08de72e936ed082c7?s=40&d=mm",
        "people_finding": "",
        "full_name": "Cody Soyland",
        "slug": "cody-soyland"
    },
    "model": "lore.speaker",
    "pk": 45
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:07.721Z",
        "prenom": "Dimitris",
        "people": "glezos",
        "pyvideo_pk": 7,
        "people_photo": "https://secure.gravatar.com/avatar/2930bfe5cff549e49bd77dc7f957e40f?d=mm&s=40",
        "people_finding": "http://del.icio.us/glezos<br>http://www.linkedin.com/in/glezos<br>http://twitter.com/glezos",
        "full_name": "Dimitris Glezos",
        "slug": "dimitris-glezos"
    },
    "model": "lore.speaker",
    "pk": 46
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:44.814Z",
        "prenom": "Colin",
        "people": "copelco",
        "pyvideo_pk": 741,
        "people_photo": "https://secure.gravatar.com/avatar/1f046f97273570c7819a7e42507ef1c9?d=mm&s=40",
        "people_finding": "http://www.linkedin.com/in/colincopeland",
        "full_name": "Colin Copeland",
        "slug": "colin-copeland"
    },
    "model": "lore.speaker",
    "pk": 47
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:43.237Z",
        "prenom": "James",
        "people": "jamessocol",
        "pyvideo_pk": 736,
        "people_photo": "https://secure.gravatar.com/avatar/327971d6b5d9c5c4cde17ecaf696f881?s=40&d=mm",
        "people_finding": "https://github.com/jsocol<br>http://www.linkedin.com/in/jamessocol<br>https://twitter.com/jamessocol",
        "full_name": "James Socol",
        "slug": "james-socol"
    },
    "model": "lore.speaker",
    "pk": 48
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:11.756Z",
        "prenom": "Issac",
        "people": "issackelly",
        "pyvideo_pk": 41,
        "people_photo": "https://secure.gravatar.com/avatar/eb3b5ca076e590e95e402d2a0132dffa?s=40&d=mm",
        "people_finding": "http://delicious.com/issackelly<br>http://twitter.com/issackelly",
        "full_name": "Issac Kelly",
        "slug": "issac-kelly"
    },
    "model": "lore.speaker",
    "pk": 49
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:34.739Z",
        "prenom": "Joe",
        "people": "joejaz",
        "pyvideo_pk": 733,
        "people_photo": "https://secure.gravatar.com/avatar/24cf1adb01f692aa0e672cb48b93d173?s=40&d=mm",
        "people_finding": "https://bitbucket.org/JoeJasinski<br>https://github.com/JoeJasinski<br>http://www.linkedin.com/profile/view?id=27505892&trk=tab_pro<br>http://stackoverflow.com/users/226081/joe-j<br>https://twitter.com/#!/JoeJJasinski",
        "full_name": "Joe Jasinski",
        "slug": "joe-jasinski"
    },
    "model": "lore.speaker",
    "pk": 50
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:01.523Z",
        "prenom": "Jonas",
        "people": "ojii",
        "pyvideo_pk": 47,
        "people_photo": "https://secure.gravatar.com/avatar/0f0907f4d7a47906ef8e346156c4ffcb?s=40&d=mm",
        "people_finding": "https://bitbucket.org/ojii<br>https://github.com/ojii<br>http://stackoverflow.com/users/628375/ojii<br>https://www.twitter.com/ojiidotch",
        "full_name": "Jonas Obrist",
        "slug": "jonas-obrist"
    },
    "model": "lore.speaker",
    "pk": 51
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:21.928Z",
        "prenom": "Joshua",
        "people": "jag",
        "pyvideo_pk": 748,
        "people_photo": "https://secure.gravatar.com/avatar/893dfbf1c1073268739f796939bf7a79?s=40&d=mm",
        "people_finding": "http://www.facebook.com/jaginsberg<br>http://www.linkedin.com/in/joshuaginsberg<br>http://www.twitter.com/j00bar",
        "full_name": "Joshua Ginsberg",
        "slug": "joshua-ginsberg"
    },
    "model": "lore.speaker",
    "pk": 52
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:20.802Z",
        "prenom": "Michael",
        "people": "mtrythall",
        "pyvideo_pk": 31,
        "people_photo": "https://secure.gravatar.com/avatar/343be50df57075055b61a622443584d4?d=mm&s=40",
        "people_finding": "http://twitter.com/mtrythall",
        "full_name": "Michael Trythall",
        "slug": "michael-trythall"
    },
    "model": "lore.speaker",
    "pk": 53
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T17:23:34.921Z",
        "prenom": "Igor",
        "people": "playpauseandstop",
        "pyvideo_pk": null,
        "people_photo": "https://secure.gravatar.com/avatar/2142f28d49768f2967d5d2f1a02e38b8?s=40&d=mm",
        "people_finding": "http://del.icio.us/playpauseandstop<br>http://www.facebook.com/playpauseandstop<br>https://github.com/playpauseandstop<br>http://twitter.com/playpausenstop",
        "full_name": "Igor Davydenko",
        "slug": "igor-davydenko"
    },
    "model": "lore.speaker",
    "pk": 54
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:32.122Z",
        "prenom": "Tareque",
        "people": "tarequeh",
        "pyvideo_pk": 49,
        "people_photo": "https://secure.gravatar.com/avatar/dddf962bfee445af19ef102bef10b546?s=40&d=mm",
        "people_finding": "http://www.linkedin.com/in/tarequeh<br>http://twitter.com/tarequeh",
        "full_name": "Tareque Hossain",
        "slug": "tareque-hossain"
    },
    "model": "lore.speaker",
    "pk": 55
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:28.417Z",
        "prenom": "Terry",
        "people": "towen",
        "pyvideo_pk": 34,
        "people_photo": "https://secure.gravatar.com/avatar/3f486372ed7c8ca47569dc3a41a299fe?s=40&d=mm",
        "people_finding": "http://www.facebook.com/iknowmac<br>http://www.linkedin.com/in/terryowen",
        "full_name": "Terry J. Owen",
        "slug": "terry-j-owen"
    },
    "model": "lore.speaker",
    "pk": 56
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:09.887Z",
        "prenom": "Yann",
        "people": "yml",
        "pyvideo_pk": 33,
        "people_photo": "https://secure.gravatar.com/avatar/ec67009b0d799b562e08797860d93233?d=mm&s=40",
        "people_finding": "",
        "full_name": "Yann Malet",
        "slug": "yann-malet"
    },
    "model": "lore.speaker",
    "pk": 57
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T17:24:04.397Z",
        "prenom": "Sean",
        "people": "seanroth",
        "pyvideo_pk": null,
        "people_photo": "https://secure.gravatar.com/avatar/2142f28d49768f2967d5d2f1a02e38b8?s=40&d=mm",
        "people_finding": "http://www.facebook.com/profile.php?id=1051770031<br>http://pownce.com/seanroth<br>http://twitter.com/seanroth\r\n\t\t\t\t\t",
        "full_name": "Sean Roth",
        "slug": "sean-roth"
    },
    "model": "lore.speaker",
    "pk": 58
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:55.246Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 1057,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Tom Eastman",
        "slug": "tom-eastman"
    },
    "model": "lore.speaker",
    "pk": 59
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:19.504Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 751,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Selena Deckelmann",
        "slug": "selena-deckelmann"
    },
    "model": "lore.speaker",
    "pk": 60
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:32.919Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 726,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Kenneth Reitz",
        "slug": "kenneth-reitz"
    },
    "model": "lore.speaker",
    "pk": 61
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:47.015Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 13,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Ian Bicking",
        "slug": "ian-bicking"
    },
    "model": "lore.speaker",
    "pk": 62
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:37.306Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 731,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Justin Myles Holmes",
        "slug": "justin-myles-holmes"
    },
    "model": "lore.speaker",
    "pk": 63
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:42:54.050Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 20,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Avi Bryant",
        "slug": "avi-bryant"
    },
    "model": "lore.speaker",
    "pk": 64
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:03.995Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 51,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Adam Miskiewicz",
        "slug": "adam-miskiewicz"
    },
    "model": "lore.speaker",
    "pk": 65
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:28.138Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 214,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Brian Moloney",
        "slug": "brian-moloney"
    },
    "model": "lore.speaker",
    "pk": 66
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:46.271Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 739,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Christophe Pettus",
        "slug": "christophe-pettus"
    },
    "model": "lore.speaker",
    "pk": 67
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:21.157Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 76,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Chris McDonough",
        "slug": "chris-mcdonough"
    },
    "model": "lore.speaker",
    "pk": 68
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:56.001Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 53,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Tracy Osborn",
        "slug": "tracy-osborn"
    },
    "model": "lore.speaker",
    "pk": 70
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:39.893Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 742,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Mjumbe Poe",
        "slug": "mjumbe-poe"
    },
    "model": "lore.speaker",
    "pk": 71
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:15.390Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 39,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Katharine Jarmul",
        "slug": "katharine-jarmul"
    },
    "model": "lore.speaker",
    "pk": 72
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:44.745Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 43,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Miguel Araujo",
        "slug": "miguel-araujo"
    },
    "model": "lore.speaker",
    "pk": 73
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:44.026Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 743,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Mark Lavin",
        "slug": "mark-lavin"
    },
    "model": "lore.speaker",
    "pk": 74
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:29.576Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 745,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Mike Biglan",
        "slug": "mike-biglan"
    },
    "model": "lore.speaker",
    "pk": 78
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:45.838Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 40,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Paul McMillan",
        "slug": "paul-mcmillan"
    },
    "model": "lore.speaker",
    "pk": 79
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:51.136Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 37,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Noah Silas",
        "slug": "noah-silas"
    },
    "model": "lore.speaker",
    "pk": 80
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:38.375Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 32,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Jeff Balogh",
        "slug": "jeff-balogh"
    },
    "model": "lore.speaker",
    "pk": 81
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:29.178Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 746,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Kyle Rimkus",
        "slug": "kyle-rimkus"
    },
    "model": "lore.speaker",
    "pk": 82
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:13.071Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 54,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Adam Nelson",
        "slug": "adam-nelson"
    },
    "model": "lore.speaker",
    "pk": 83
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:30.460Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 732,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Julia Grace",
        "slug": "julia-grace"
    },
    "model": "lore.speaker",
    "pk": 84
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T17:23:04.961Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 1179,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Adam Jenkins",
        "slug": "adam-jenkins"
    },
    "model": "lore.speaker",
    "pk": 85
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:40.726Z",
        "prenom": "",
        "people": "",
        "pyvideo_pk": 737,
        "people_photo": "",
        "people_finding": "",
        "full_name": "Amjith Ramanujam",
        "slug": "amjith-ramanujam"
    },
    "model": "lore.speaker",
    "pk": 86
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:08.666Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Shawn Rider and Nowell Strite",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 88
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:22.706Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Sean O'Connor",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 89
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:43:58.178Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Glyph Lefkowitz",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 90
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:02.450Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Graham Dumpleton",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 91
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:17.022Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Eric Sterling",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 92
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:17.933Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Geoff Schmidt",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 93
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:24.442Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Erik Rose",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 94
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:31.345Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Erik Labianca",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 95
},
{
    "fields": {
        "github": null,
        "last_updated": "2014-09-27T20:44:52.464Z",
        "prenom": null,
        "people": null,
        "pyvideo_pk": null,
        "people_photo": null,
        "people_finding": null,
        "full_name": "Dylan Jay",
        "slug": null
    },
    "model": "lore.speaker",
    "pk": 96
}
]
